basePath: /api
definitions:
  AppErr:
    properties:
      Error:
        items:
          type: string
        type: array
      RequestID:
        type: string
    type: object
    x-go-package: go-app/server/handler
  BrandInfo:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
      logo:
        $ref: '#/definitions/IMG'
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: go-app/model
  CatalogDiscountInfo:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
      is_active:
        type: boolean
        x-go-name: IsActive
      max_value:
        description: MaxValue will only be applicable in case of PercentOffType type
          where you want to restrict discount value to a limit.
        format: uint64
        type: integer
        x-go-name: MaxValue
      type:
        type: string
        x-go-name: Type
      value:
        format: uint64
        type: integer
        x-go-name: Value
    type: object
    x-go-package: go-app/model
  CatalogInfo:
    properties:
      base_price:
        $ref: '#/definitions/Price'
      brand_id:
        $ref: '#/definitions/ObjectID'
      brand_info:
        $ref: '#/definitions/BrandInfo'
      discount_info:
        $ref: '#/definitions/CatalogDiscountInfo'
      featured_image:
        $ref: '#/definitions/IMG'
      id:
        $ref: '#/definitions/ObjectID'
      name:
        type: string
        x-go-name: Name
      retail_price:
        $ref: '#/definitions/Price'
      variant_type:
        type: string
        x-go-name: VariantType
      variants:
        items:
          $ref: '#/definitions/VariantInfo'
        type: array
        x-go-name: Variants
    type: object
    x-go-package: go-app/model
  Closer:
    description: |-
      The behavior of Close after the first call is undefined.
      Specific implementations may document their own behavior.
    properties:
      Close:
        type: string
    title: Closer is the interface that wraps the basic Close method.
    type: object
    x-go-package: io
  CreateCommentOpts:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      resource_id:
        format: ObjectID
        type: string
        x-go-name: ResourceID
      resource_type:
        type: string
        x-go-name: ResourceType
      user_id:
        format: ObjectID
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  CreateCommentResp:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      resource_id:
        format: ObjectID
        type: string
        x-go-name: ResourceID
      resource_type:
        type: string
        x-go-name: ResourceType
      user_id:
        format: ObjectID
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  CreateImageMediaOpts:
    properties:
      base64_src:
        type: string
        x-go-name: Base64SRC
      file_name:
        type: string
        x-go-name: FileName
    required:
    - file_name
    - base64_src
    type: object
    x-go-package: go-app/schema
  CreateImageMediaResp:
    properties:
      cloudfront_url:
        type: string
        x-go-name: CloudfrontURL
      dimensions:
        $ref: '#/definitions/Dimensions'
      file_name:
        type: string
        x-go-name: FileName
      file_type:
        type: string
        x-go-name: FileType
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      src_bucket_url:
        type: string
        x-go-name: SRCBucketURL
      url:
        type: string
        x-go-name: URL
    type: object
    x-go-package: go-app/schema
  CreateImageMediaV2Opts:
    properties:
      file:
        $ref: '#/definitions/File'
      file_name:
        type: string
        x-go-name: FileName
    type: object
    x-go-package: go-app/schema
  CreateLikeOpts:
    properties:
      resource_id:
        $ref: '#/definitions/ObjectID'
      resource_type:
        type: string
        x-go-name: ResourceType
      user_id:
        $ref: '#/definitions/ObjectID'
    type: object
    x-go-package: go-app/schema
  CreateLiveCommentOpts:
    properties:
      arn:
        type: string
        x-go-name: ARN
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      live_id:
        format: ObjectID
        type: string
        x-go-name: LiveID
      name:
        type: string
        x-go-name: Name
      profile_image:
        $ref: '#/definitions/Img'
      type:
        type: string
        x-go-name: Type
      user_id:
        format: ObjectID
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  CreateLiveStreamOpts:
    properties:
      catalog_ids:
        format: ObjectID
        type: string
        x-go-name: CatalogIDs
      featured_image:
        $ref: '#/definitions/Img'
      influencer_ids:
        format: ObjectID
        type: string
        x-go-name: InfluencerIDs
      name:
        type: string
        x-go-name: Name
      scheduled_at:
        format: date-time
        type: string
        x-go-name: ScheduledAt
      stream_end_image:
        $ref: '#/definitions/Img'
    type: object
    x-go-package: go-app/schema
  CreateLiveStreamResp:
    properties:
      catalog_ids:
        format: ObjectID
        type: string
        x-go-name: CatalogIDs
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      featured_image:
        $ref: '#/definitions/IMG'
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      influencer_ids:
        format: ObjectID
        type: string
        x-go-name: InfluencerIDs
      name:
        type: string
        x-go-name: Name
      scheduled_at:
        format: date-time
        type: string
        x-go-name: ScheduledAt
      slug:
        type: string
        x-go-name: Slug
      stream_end_image:
        $ref: '#/definitions/IMG'
    type: object
    x-go-package: go-app/schema
  CreatePebbleAppOpts:
    properties:
      brand_ids:
        format: ObjectID
        type: string
        x-go-name: BrandIDs
      caption:
        type: string
        x-go-name: Caption
      catalog_ids:
        format: ObjectID
        type: string
        x-go-name: CatalogIDs
      category_id:
        description: Label         *CreatorLabelOpts    `json:"label" validate:"required"`
        format: ObjectID
        type: string
        x-go-name: CategoryID
      creator_id:
        format: ObjectID
        type: string
        x-go-name: CreatorID
      file_name:
        type: string
        x-go-name: FileName
      influencer_ids:
        format: ObjectID
        type: string
        x-go-name: InfluencerIDs
    type: object
    x-go-package: go-app/schema
  CreatePebbleAppV2Opts:
    properties:
      creator_id:
        description: Caption       string               `json:"caption" validate:"required"`
        format: ObjectID
        type: string
        x-go-name: CreatorID
      file_name:
        type: string
        x-go-name: FileName
    type: object
    x-go-package: go-app/schema
  CreatePebbleResp:
    properties:
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      token:
        type: string
        x-go-name: Token
    type: object
    x-go-package: go-app/schema
  CreateViewOpts:
    properties:
      created_at:
        description: Timestamp of instance when user started watching video
        format: date-time
        type: string
        x-go-name: CreatedAt
      duration:
        $ref: '#/definitions/Duration'
      resource_id:
        format: ObejctID
        type: string
        x-go-name: ResourceID
      resource_type:
        type: string
        x-go-name: ResourceType
      user_id:
        format: ObejctID
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  CurrencyISO:
    description: CurrencyISO iso representation of currency
    type: string
    x-go-package: go-app/model
  Dimensions:
    description: Dimensions contains height and width of video in pixels
    properties:
      height:
        format: uint64
        type: integer
        x-go-name: Height
      width:
        format: uint64
        type: integer
        x-go-name: Width
    type: object
    x-go-package: go-app/model
  Duration:
    description: |-
      A Duration represents the elapsed time between two instants
      as an int64 nanosecond count. The representation limits the
      largest representable duration to approximately 290 years.
    format: int64
    type: integer
    x-go-package: time
  EditPebbleAppOpts:
    properties:
      brand_ids:
        description: 'swagger: strfmt ObjectID'
        items:
          $ref: '#/definitions/ObjectID'
        type: array
        x-go-name: BrandIDs
      caption:
        type: string
        x-go-name: Caption
      catalog_ids:
        description: 'swagger: strfmt ObjectID'
        items:
          $ref: '#/definitions/ObjectID'
        type: array
        x-go-name: CatalogIDs
      category_id:
        description: 'swagger: strfmt ObjectID'
        items:
          $ref: '#/definitions/ObjectID'
        type: array
        x-go-name: CategoryID
      creator_id:
        $ref: '#/definitions/ObjectID'
      id:
        $ref: '#/definitions/ObjectID'
      influencer_ids:
        description: 'swagger: strfmt ObjectID'
        items:
          $ref: '#/definitions/ObjectID'
        type: array
        x-go-name: InfluencerIDs
      is_active:
        description: Label         *CreatorEditLabelOpts `json:"label"`
        type: boolean
        x-go-name: IsActive
    type: object
    x-go-package: go-app/schema
  EditPebbleAppResp:
    properties:
      brand_ids:
        items:
          $ref: '#/definitions/ObjectID'
        type: array
        x-go-name: BrandIDs
      caption:
        type: string
        x-go-name: Caption
      catalog_ids:
        items:
          $ref: '#/definitions/ObjectID'
        type: array
        x-go-name: CatalogIDs
      category_path:
        items:
          type: string
        type: array
        x-go-name: Path
      hashtags:
        items:
          type: string
        type: array
        x-go-name: HashTags
      id:
        $ref: '#/definitions/ObjectID'
      influencer_ids:
        items:
          $ref: '#/definitions/ObjectID'
        type: array
        x-go-name: InfluencerIDs
      is_active:
        description: Label         *CreatorEditLabelOpts `json:"label,omitempty"`
        type: boolean
        x-go-name: IsActive
    type: object
    x-go-package: go-app/schema
  File:
    allOf:
    - properties:
        Close:
          type: string
      type: object
    - type: object
    - type: object
    - type: object
    description: |-
      Its contents may be either stored in memory or on disk.
      If stored on disk, the File's underlying concrete type will be an *os.File.
    title: File is an interface to access the file part of a multipart message.
    type: object
    x-go-package: mime/multipart
  GetAppLiveStreamInfluencerResp:
    properties:
      catalog_ids:
        format: ObjectID
        type: string
        x-go-name: CatalogIDs
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      featured_image:
        $ref: '#/definitions/IMG'
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      influencer_ids:
        format: ObjectID
        type: string
        x-go-name: InfluencerIDs
      ivs:
        $ref: '#/definitions/IVS'
      name:
        type: string
        x-go-name: Name
      scheduled_at:
        format: date-time
        type: string
        x-go-name: ScheduledAt
      slug:
        type: string
        x-go-name: Slug
      status:
        $ref: '#/definitions/StreamStatus'
      stream_end_image:
        $ref: '#/definitions/IMG'
    type: object
    x-go-package: go-app/schema
  GetAppLiveStreamResp:
    properties:
      catalog_ids:
        format: ArrayObjectID
        type: string
        x-go-name: CatalogIDs
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      featured_image:
        $ref: '#/definitions/IMG'
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      influencer_ids:
        format: ArrayObjectID
        type: string
        x-go-name: InfluencerIDs
      influencer_name:
        type: string
        x-go-name: InfluencerName
      name:
        type: string
        x-go-name: Name
      scheduled_at:
        format: date-time
        type: string
        x-go-name: ScheduledAt
      slug:
        type: string
        x-go-name: Slug
      status:
        $ref: '#/definitions/StreamStatus'
      stream_end_image:
        $ref: '#/definitions/IMG'
    type: object
    x-go-package: go-app/schema
  GetAppLiveStreamsFilter:
    properties:
      Page:
        format: int64
        type: integer
    type: object
    x-go-package: go-app/schema
  GetCatalogsByInfluencerID:
    properties:
      InfluencerID:
        type: string
      Page:
        format: int64
        type: integer
      user_id:
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  GetCollectionFilter:
    properties:
      genders:
        items:
          type: string
        type: array
        x-go-name: Genders
      page:
        format: int64
        type: integer
        x-go-name: Page
    type: object
    x-go-package: go-app/schema
  GetLiveByInfluencerID:
    properties:
      completed:
        items:
          $ref: '#/definitions/GetAppLiveStreamInfluencerResp'
        type: array
        x-go-name: Completed
      upcoming:
        items:
          $ref: '#/definitions/GetAppLiveStreamInfluencerResp'
        type: array
        x-go-name: Upcoming
    type: object
    x-go-package: go-app/schema
  GetMainCategoriesByParentIDResp:
    properties:
      featured_image:
        $ref: '#/definitions/IMG'
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: go-app/schema
  GetMainCategoriesMapResp:
    properties:
      ancestors_id:
        format: ObjectID
        type: string
        x-go-name: AncestorID
      featured_image:
        $ref: '#/definitions/IMG'
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      parent_id:
        format: ObjectID
        type: string
        x-go-name: ParentID
      thumbnail:
        $ref: '#/definitions/IMG'
    type: object
    x-go-package: go-app/schema
  GetParentCategoriesResp:
    properties:
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      thumbnail:
        $ref: '#/definitions/IMG'
    type: object
    x-go-package: go-app/schema
  GetPebbleByBrandID:
    properties:
      BrandID:
        type: string
      Page:
        format: int64
        type: integer
      user_id:
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  GetPebbleByCategoryIDOpts:
    properties:
      CategoryID:
        type: string
      Page:
        format: uint64
        type: integer
      Sort:
        format: int64
        type: integer
      user_id:
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  GetPebbleByHashtag:
    properties:
      hashtag:
        type: string
        x-go-name: Hashtag
      page:
        format: int64
        type: integer
        x-go-name: Page
      user_id:
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  GetPebbleByIDFilter:
    properties:
      ID:
        type: string
      UserID:
        type: string
    type: object
    x-go-package: go-app/schema
  GetPebbleByInfluencerID:
    properties:
      InfluencerID:
        type: string
      IsActive:
        type: boolean
      Page:
        format: int64
        type: integer
      user_id:
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  GetPebbleCollectionESResp:
    properties:
      brand_ids:
        items:
          type: string
        type: array
        x-go-name: BrandIDs
      brand_info:
        items:
          $ref: '#/definitions/BrandInfo'
        type: array
        x-go-name: BrandInfo
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      genders:
        items:
          type: string
        type: array
        x-go-name: Genders
      hashtags:
        items:
          type: string
        type: array
        x-go-name: Hashtags
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      influencer_ids:
        items:
          type: string
        type: array
        x-go-name: InfluencerIDs
      influencer_info:
        items:
          $ref: '#/definitions/InfluencerInfo'
        type: array
        x-go-name: InfluencerInfo
      name:
        type: string
        x-go-name: Name
      series_subcollection:
        items:
          $ref: '#/definitions/SeriesSubCollection'
        type: array
        x-go-name: SeriesSubCollection
      status:
        type: string
        x-go-name: Status
      type:
        type: string
        x-go-name: Type
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: go-app/schema
  GetPebbleESResp:
    properties:
      brand_ids:
        format: ObjectID
        type: string
        x-go-name: BrandIDs
      brand_info:
        items:
          $ref: '#/definitions/BrandInfo'
        type: array
        x-go-name: BrandInfo
      caption:
        type: string
        x-go-name: Caption
      catalog_ids:
        format: ObjectID
        type: string
        x-go-name: CatalogIDs
      catalog_info:
        items:
          $ref: '#/definitions/CatalogInfo'
        type: array
        x-go-name: CatalogInfo
      category_path:
        items:
          type: string
        type: array
        x-go-name: Paths
      comment_count:
        format: int64
        type: integer
        x-go-name: CommentCount
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      hashtags:
        items:
          type: string
        type: array
        x-go-name: Hashtags
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      influencer_ids:
        format: ObjectID
        type: string
        x-go-name: InfluencerIDs
      influencer_info:
        items:
          $ref: '#/definitions/InfluencerInfo'
        type: array
        x-go-name: InfluencerInfo
      is_active:
        type: boolean
        x-go-name: IsActive
      is_liked_by_user:
        type: boolean
        x-go-name: IsLikedByUser
      like_count:
        format: int64
        type: integer
        x-go-name: LikeCount
      media_id:
        format: ObjectID
        type: string
        x-go-name: MediaID
      media_info:
        $ref: '#/definitions/GetPebbleMediaESResp'
      media_type:
        type: string
        x-go-name: MediaType
      type:
        type: string
        x-go-name: Type
      view_count:
        format: int64
        type: integer
        x-go-name: ViewCount
    type: object
    x-go-package: go-app/schema
  GetPebbleFilter:
    properties:
      IsSeries:
        type: boolean
      genders:
        items:
          type: string
        type: array
        x-go-name: Genders
      interests:
        items:
          type: string
        type: array
        x-go-name: Interests
      page:
        format: uint64
        type: integer
        x-go-name: Page
      user_id:
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  GetPebbleMediaESResp:
    properties:
      dimensions:
        $ref: '#/definitions/Dimensions'
      duration:
        format: float
        type: number
        x-go-name: Duration
      hls_playback_url:
        type: string
        x-go-name: PlaybackURL
      id:
        $ref: '#/definitions/ObjectID'
      is_portrait:
        type: boolean
        x-go-name: IsPortrait
      thumbnail_url:
        items:
          type: string
        type: array
        x-go-name: ThumbnailURLS
    type: object
    x-go-package: go-app/schema
  GetPebbleSeriesESResp:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      is_active:
        type: boolean
        x-go-name: IsActive
      name:
        type: string
        x-go-name: Name
      pebble_ids:
        items:
          type: object
        type: array
        x-go-name: PebbleIds
      pebble_info:
        items:
          $ref: '#/definitions/GetPebbleESResp'
        type: array
        x-go-name: PebbleInfo
      thumbnail:
        $ref: '#/definitions/IMG'
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: go-app/schema
  GetSeriesByIDs:
    properties:
      id:
        items:
          type: string
        type: array
        x-go-name: ID
      page:
        format: int64
        type: integer
        x-go-name: Page
      user_id:
        type: string
        x-go-name: UserID
    type: object
    x-go-package: go-app/schema
  GetSubCategoriesByParentIDResp:
    properties:
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: go-app/schema
  IMG:
    description: IMG contains image url, src, height and id
    properties:
      height:
        format: int64
        type: integer
        x-go-name: Height
      src:
        type: string
        x-go-name: SRC
      width:
        format: int64
        type: integer
        x-go-name: Width
    type: object
    x-go-package: go-app/model
  IVS:
    description: IVS contains aws IVS specific configuration
    properties:
      channel:
        $ref: '#/definitions/IVSChannel'
      ingestion:
        $ref: '#/definitions/IVSIngest'
      playback:
        $ref: '#/definitions/IVSPlayback'
    type: object
    x-go-package: go-app/model
  IVSChannel:
    description: IVSChannel contains channel specific configuration
    properties:
      arn:
        type: string
        x-go-name: ARN
      latency_mode:
        type: string
        x-go-name: LatencyMode
      name:
        type: string
        x-go-name: Name
      playback_authorization:
        type: boolean
        x-go-name: PlaybackAuthorization
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: go-app/model
  IVSIngest:
    description: IVSIngest contains channel video ingestion specific configuration
    properties:
      server_url:
        type: string
        x-go-name: IngestURL
      stream_key:
        type: string
        x-go-name: StreamKey
    type: object
    x-go-package: go-app/model
  IVSPlayback:
    description: IVSPlayback contains IVS playback specific configuration
    properties:
      playback_url:
        type: string
        x-go-name: PlaybackURL
    type: object
    x-go-package: go-app/model
  Img:
    description: Img contains image src url
    properties:
      src:
        type: string
        x-go-name: SRC
    type: object
    x-go-package: go-app/schema
  InfluencerInfo:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
      name:
        type: string
        x-go-name: Name
      profile_image:
        $ref: '#/definitions/IMG'
    type: object
    x-go-package: go-app/model
  JoinLiveStreamResp:
    properties:
      arn:
        type: string
        x-go-name: ARN
      playbackURL:
        type: string
        x-go-name: PlaybackURL
    type: object
    x-go-package: go-app/schema
  ObjectID:
    items:
      format: uint8
      type: integer
    title: ObjectID is the BSON ObjectID type.
    type: array
    x-go-package: go.mongodb.org/mongo-driver/bson/primitive
  Price:
    description: Price represents cost of an entity
    properties:
      iso:
        $ref: '#/definitions/CurrencyISO'
      value:
        format: float
        type: number
        x-go-name: Value
    type: object
    x-go-package: go-app/model
  PushCatalogOpts:
    properties:
      arn:
        type: string
        x-go-name: ARN
      id:
        format: ObjectID
        type: string
        x-go-name: ID
    type: object
    x-go-package: go-app/schema
  PushJoinOpts:
    properties:
      arn:
        type: string
        x-go-name: ARN
      id:
        format: ObjectID
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: go-app/schema
  Reader:
    description: |-
      Read reads up to len(p) bytes into p. It returns the number of bytes
      read (0 <= n <= len(p)) and any error encountered. Even if Read
      returns n < len(p), it may use all of p as scratch space during the call.
      If some data is available but not len(p) bytes, Read conventionally
      returns what is available instead of waiting for more.

      When Read encounters an error or end-of-file condition after
      successfully reading n > 0 bytes, it returns the number of
      bytes read. It may return the (non-nil) error from the same call
      or return the error (and n == 0) from a subsequent call.
      An instance of this general case is that a Reader returning
      a non-zero number of bytes at the end of the input stream may
      return either err == EOF or err == nil. The next Read should
      return 0, EOF.

      Callers should always process the n > 0 bytes returned before
      considering the error err. Doing so correctly handles I/O errors
      that happen after reading some bytes and also both of the
      allowed EOF behaviors.

      Implementations of Read are discouraged from returning a
      zero byte count with a nil error, except when len(p) == 0.
      Callers should treat a return of 0 and nil as indicating that
      nothing happened; in particular it does not indicate EOF.

      Implementations must not retain p.
    title: Reader is the interface that wraps the basic Read method.
    type: object
    x-go-package: io
  ReaderAt:
    description: |-
      ReadAt reads len(p) bytes into p starting at offset off in the
      underlying input source. It returns the number of bytes
      read (0 <= n <= len(p)) and any error encountered.

      When ReadAt returns n < len(p), it returns a non-nil error
      explaining why more bytes were not returned. In this respect,
      ReadAt is stricter than Read.

      Even if ReadAt returns n < len(p), it may use all of p as scratch
      space during the call. If some data is available but not len(p) bytes,
      ReadAt blocks until either all the data is available or an error occurs.
      In this respect ReadAt is different from Read.

      If the n = len(p) bytes returned by ReadAt are at the end of the
      input source, ReadAt may return either err == EOF or err == nil.

      If ReadAt is reading from an input source with a seek offset,
      ReadAt should not affect nor be affected by the underlying
      seek offset.

      Clients of ReadAt can execute parallel ReadAt calls on the
      same input source.

      Implementations must not retain p.
    title: ReaderAt is the interface that wraps the basic ReadAt method.
    type: object
    x-go-package: io
  Seeker:
    description: |-
      Seek sets the offset for the next Read or Write to offset,
      interpreted according to whence:
      SeekStart means relative to the start of the file,
      SeekCurrent means relative to the current offset, and
      SeekEnd means relative to the end.
      Seek returns the new offset relative to the start of the
      file and an error, if any.

      Seeking to an offset before the start of the file is an error.
      Seeking to any positive offset is legal, but the behavior of subsequent
      I/O operations on the underlying object is implementation-dependent.
    title: Seeker is the interface that wraps the basic Seek method.
    type: object
    x-go-package: io
  SeriesSubCollection:
    properties:
      _id:
        $ref: '#/definitions/ObjectID'
      series_ids:
        items:
          type: string
        type: array
        x-go-name: SeriesIDs
      thumbnail:
        $ref: '#/definitions/IMG'
    type: object
    x-go-package: go-app/model
  StartLiveStreamResp:
    properties:
      ingest_url:
        type: string
        x-go-name: IngestURL
      stream_key:
        type: string
        x-go-name: StreamKey
    type: object
    x-go-package: go-app/schema
  StreamStatus:
    description: StreamStatus represents status of the stream
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: go-app/model
  VariantInfo:
    properties:
      attribute:
        type: string
        x-go-name: Attribute
      id:
        $ref: '#/definitions/ObjectID'
      inventory_id:
        $ref: '#/definitions/ObjectID'
      is_deleted:
        type: boolean
        x-go-name: IsDeleted
      sku:
        type: string
        x-go-name: SKU
    type: object
    x-go-package: go-app/model
host: cms.getshitdone.in
info:
  description: API related to
  title: 'Stardust API:'
paths:
  /app/category/{categoryID}/lvl2:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return main category by parent ID.

        Endpoint: /app/category/{categoryID}/lvl2

        Method: GET
      operationId: getMainCategoryByParentID
      parameters:
      - enum:
        - 6065d4503824bf77961c21ae
        in: path
        name: categoryID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetMainCategoriesByParentIDResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getMainCategoryByParentID
      tags:
      - AppCategory
  /app/category/{categoryID}/lvl3:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return sub category by parent ID.

        Endpoint: /app/category/{categoryID}/lvl3

        Method: GET
      operationId: getSubCatergoryByParentID
      parameters:
      - enum:
        - 6065d4503824bf77961c21ae
        in: path
        name: categoryID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetSubCategoriesByParentIDResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getSubCatergoryByParentID
      tags:
      - AppCategory
  /app/category/lvl1:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the parent category.

        Endpoint: /app/category/lvl1

        Method: GET
      operationId: getParentCategory
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetParentCategoriesResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getParentCategory
      tags:
      - AppCategory
  /app/category/main:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return main category map.

        Endpoint: /app/category/main

        Method: GET
      operationId: getMainCategoryMap
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetMainCategoriesMapResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getMainCategoryMap
      tags:
      - AppCategory
  /app/influencer/live:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint will return app live streams by influencerID.

        Endpoint: /app/influencer/live

        Method: GET
      operationId: getAppLiveStreamsByInfluencerID
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetAppLiveStreamsFilter'
          type: object
      - description: Login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetAppLiveStreamInfluencerResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getAppLiveStreamsByInfluencerID
      tags:
      - LiveStream
    post:
      consumes:
      - application/json
      description: |-
        This endpoint will create live stream.

        Endpoint: /app/influencer/live

        Method: POST
      operationId: createLiveStreamByApp
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateLiveStreamOpts'
          type: object
      - description: Login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/CreateLiveStreamResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: createLiveStreamByApp
      tags:
      - LiveStream
  /app/influencer/pebble:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return pebbles for the creator.

        Endpoint: /app/influencer/pebble

        Method: GET
      operationId: getPebblesForCreator
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetPebbleByInfluencerID'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getPebblesForCreator
      tags:
      - Pebble
    post:
      consumes:
      - application/json
      description: |-
        This endpoint create pebble in app.

        Endpoint: /app/influencer/pebble

        Method: POST
      operationId: createPebbleApp
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreatePebbleAppOpts'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/CreatePebbleResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: createPebbleApp
      tags:
      - Pebble
    put:
      consumes:
      - application/json
      description: |-
        This endpoint create pebble app.

        Endpoint: /app/influencer/pebble

        Method: PUT
      operationId: editPebbleApp
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/EditPebbleAppOpts'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/EditPebbleAppResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: editPebbleApp
      tags:
      - Pebble
  /app/live/{liveID}/catalog:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint push catalog.

        Endpoint: /app/live/{liveID}/catalog

        Method: POST
      operationId: pushCatalog
      parameters:
      - enum:
        - 6065d4503824bf77961c21ae
        in: path
        name: liveID
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/PushCatalogOpts'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ' true'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: pushCatalog
      tags:
      - LiveStream
  /app/live/{liveID}/start:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint will start live stream.

        Endpoint: /app/live/{liveID}/start

        Method: GET
      operationId: startLiveStream
      parameters:
      - enum:
        - 6065d4503824bf77961c21ae
        in: path
        name: liveID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/StartLiveStreamResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: startLiveStream
      tags:
      - LiveStream
  /app/live/{liveID}/stop:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint will stop the live stream.

        Endpoint: /app/live/{liveID}/stop

        Method: GET
      operationId: stopLiveStream
      parameters:
      - enum:
        - 6065d4503824bf77961c21ae
        in: path
        name: liveID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: stopLiveStream
      tags:
      - LiveStream
  /catalog/influencer:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the catalogs by influencer ID.

        Endpoint: /catalog/influencer

        Method: GET
      operationId: getCatalogsByInfluencerID
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetCatalogsByInfluencerID'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' ObjectID'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getCatalogsByInfluencerID
      tags:
      - Pebble
  /content/comment:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint will post the comment on the content.

        Endpoint: /content/comment

        Method: POST
      operationId: createContentComment
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateCommentOpts'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/CreateCommentResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: createContentComment
      tags:
      - content
  /content/like:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint will create like on content.

        Endpoint: /content/like

        Method: POST
      operationId: createLike
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateLikeOpts'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: createLike
      tags:
      - content
  /content/view:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint will create view on content.

        Endpoint: /content/view

        Method: POST
      operationId: createView
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateViewOpts'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: createView
      tags:
      - content
  /image/upload:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint post image.

        Endpoint: /image/upload

        Method: POST
      operationId: uploadImage
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateImageMediaOpts'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/CreateImageMediaResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: uploadImage
      tags:
      - UploadImage
  /live:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint get the app live streams.

        Endpoint: /live

        Method: GET
      operationId: getAppLiveStreams
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetAppLiveStreamsFilter'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetAppLiveStreamResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getAppLiveStreams
      tags:
      - live
  /live/{liveID}:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint get the app live streams by ID.

        Endpoint: /live/{liveID}

        Method: GET
      operationId: getAppLiveStreamByID
      parameters:
      - enum:
        - 6065d4503824bf77961c21ae
        in: path
        name: liveID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetAppLiveStreamResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getAppLiveStreamByID
      tags:
      - live
  /live/{liveID}/comment:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint will post the comment on live stream.

        Endpoint: /live/{liveID}/comment

        Method: POST
      operationId: pushComment
      parameters:
      - enum:
        - 6065d4503824bf77961c21ae
        in: path
        name: liveID
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateLiveCommentOpts'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: pushComment
      tags:
      - live
  /live/{liveID}/join:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint will join live stream.

        Endpoint: /live/{liveID}/join

        Method: GET
      operationId: joinLiveStream
      parameters:
      - enum:
        - 6065d4503824bf77961c21ae
        in: path
        name: liveID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/JoinLiveStreamResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: joinLiveStream
      tags:
      - live
  /live/{liveID}/joined:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint will joined the stream.

        Endpoint: /live/{liveID}/joined

        Method: POST
      operationId: joinedLiveStream
      parameters:
      - enum:
        - 6065d4503824bf77961c21ae
        in: path
        name: liveID
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/PushJoinOpts'
          type: object
      - description: Login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: joinedLiveStream
      tags:
      - live
  /pebble:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the pebbles.

        Endpoint: /pebble

        Method: GET
      operationId: getPebbleV2
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetPebbleFilter'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getPebbleV2
      tags:
      - Pebble
  /pebble/brand:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the pebbles of brand by ID.

        Endpoint: /pebble/brand

        Method: GET
      operationId: getPebblesByBrandID
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetPebbleByBrandID'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getPebblesByBrandID
      tags:
      - Pebble
  /pebble/category:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the pebble by category IDs.

        Endpoint: /pebble/category

        Method: GET
      operationId: getPebbleByCategoryID
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetPebbleByCategoryIDOpts'
          type: object
      - description: Login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getPebbleByCategoryID
      tags:
      - Pebble
  /pebble/collection:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the collection.

        Endpoint: /pebble/collection

        Method: GET
      operationId: getCollections
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetCollectionFilter'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleCollectionESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getCollections
      tags:
      - Pebble
  /pebble/hashtag:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the pebbles by respective hashtags.

        Endpoint: /pebble/hashtag

        Method: GET
      operationId: getPebblesByHashtag
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetPebbleByHashtag'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getPebblesByHashtag
      tags:
      - Pebble
  /pebble/id:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the pebbles by id.

        Endpoint: /pebble/id

        Method: GET
      operationId: getPebbleByID
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetPebbleByIDFilter'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getPebbleByID
      tags:
      - Pebble
  /pebble/influencer:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the pebbles by influencer ID.

        Endpoint: /pebble/influencer

        Method: GET
      operationId: getPebblesByInfluencerID
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetPebbleByInfluencerID'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getPebblesByInfluencerID
      tags:
      - Pebble
  /pebble/series:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return pebbles series.

        Endpoint: /pebble/series

        Method: GET
      operationId: getPebbleSeries
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetPebbleFilter'
          type: object
      - description: Customer login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleSeriesESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getPebbleSeries
      tags:
      - Pebble
  /pebble/series/id:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return the pebble series by IDs.

        Endpoint: /pebble/series/id

        Method: GET
      operationId: getPebbleSeriesByIDs
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetSeriesByIDs'
          type: object
      - description: Login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetPebbleSeriesESResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: getPebbleSeriesByIDs
      tags:
      - Pebble
  /v2/app/influencer/live:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint return app live stream by influencer ID.

        Endpoint: /v2/app/influencer/live

        Method: GET
      operationId: v2GetAppLiveStreamsByInfluencerID
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetAppLiveStreamsFilter'
          type: object
      - description: Login required for successful response.
        in: header
        name: cookie
        required: true
        type: string
      - description: Token required for successful response.
        in: header
        name: auth token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/GetLiveByInfluencerID'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: v2GetAppLiveStreamsByInfluencerID
      tags:
      - LiveStream
  /v2/app/influencer/pebble:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint create pebble app.

        Endpoint: /v2/app/influencer/pebble

        Method: POST
      operationId: createPebbleAppV2
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreatePebbleAppV2Opts'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/CreatePebbleResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: createPebbleAppV2
      tags:
      - Pebble
  /v2/image/upload:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint post image.

        Endpoint: /v2/image/upload

        Method: POST
      operationId: uploadImageV2
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateImageMediaV2Opts'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ' OK'
          schema:
            $ref: '#/definitions/CreateImageMediaResp'
        "400":
          description: ' BadRequest'
          schema:
            $ref: '#/definitions/AppErr'
        "403":
          description: Invalid User
          schema:
            $ref: '#/definitions/AppErr'
      summary: uploadImageV2
      tags:
      - UploadImage
produces:
- application/json
schemes:
- https
swagger: "2.0"
x-tagGroups:
- description: This is the stardust api.
  name: Stardust
  tags:
  - AppCategory
  - LiveStream
  - Pebble
  - content
  - UploadImage
  - live
  x-traitTag: true
