// Code generated by MockGen. DO NOT EDIT.
// Source: go-app/app (interfaces: Media)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	schema "go-app/schema"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockMedia is a mock of Media interface
type MockMedia struct {
	ctrl     *gomock.Controller
	recorder *MockMediaMockRecorder
}

// MockMediaMockRecorder is the mock recorder for MockMedia
type MockMediaMockRecorder struct {
	mock *MockMedia
}

// NewMockMedia creates a new mock instance
func NewMockMedia(ctrl *gomock.Controller) *MockMedia {
	mock := &MockMedia{ctrl: ctrl}
	mock.recorder = &MockMediaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMedia) EXPECT() *MockMediaMockRecorder {
	return m.recorder
}

// CreateImageMedia mocks base method
func (m *MockMedia) CreateImageMedia(arg0 *schema.CreateImageMediaOpts) (*schema.CreateImageMediaResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageMedia", arg0)
	ret0, _ := ret[0].(*schema.CreateImageMediaResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageMedia indicates an expected call of CreateImageMedia
func (mr *MockMediaMockRecorder) CreateImageMedia(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageMedia", reflect.TypeOf((*MockMedia)(nil).CreateImageMedia), arg0)
}

// CreateVideoMedia mocks base method
func (m *MockMedia) CreateVideoMedia(arg0 *schema.CreateVideoOpts) (*schema.CreateVideoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideoMedia", arg0)
	ret0, _ := ret[0].(*schema.CreateVideoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVideoMedia indicates an expected call of CreateVideoMedia
func (mr *MockMediaMockRecorder) CreateVideoMedia(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideoMedia", reflect.TypeOf((*MockMedia)(nil).CreateVideoMedia), arg0)
}

// DeleteMedia mocks base method
func (m *MockMedia) DeleteMedia(arg0 primitive.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMedia", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMedia indicates an expected call of DeleteMedia
func (mr *MockMediaMockRecorder) DeleteMedia(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMedia", reflect.TypeOf((*MockMedia)(nil).DeleteMedia), arg0)
}

// GenerateVideoUploadToken mocks base method
func (m *MockMedia) GenerateVideoUploadToken(arg0 *schema.GenerateVideoUploadTokenOpts) (*schema.GenerateVideoUploadTokenResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVideoUploadToken", arg0)
	ret0, _ := ret[0].(*schema.GenerateVideoUploadTokenResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateVideoUploadToken indicates an expected call of GenerateVideoUploadToken
func (mr *MockMediaMockRecorder) GenerateVideoUploadToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVideoUploadToken", reflect.TypeOf((*MockMedia)(nil).GenerateVideoUploadToken), arg0)
}

// GetImageMediaByID mocks base method
func (m *MockMedia) GetImageMediaByID(arg0 primitive.ObjectID) (*schema.GetMediaResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageMediaByID", arg0)
	ret0, _ := ret[0].(*schema.GetMediaResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageMediaByID indicates an expected call of GetImageMediaByID
func (mr *MockMediaMockRecorder) GetImageMediaByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageMediaByID", reflect.TypeOf((*MockMedia)(nil).GetImageMediaByID), arg0)
}

// GetVideoMediaByID mocks base method
func (m *MockMedia) GetVideoMediaByID(arg0 primitive.ObjectID) (*schema.GetMediaResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoMediaByID", arg0)
	ret0, _ := ret[0].(*schema.GetMediaResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoMediaByID indicates an expected call of GetVideoMediaByID
func (mr *MockMediaMockRecorder) GetVideoMediaByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoMediaByID", reflect.TypeOf((*MockMedia)(nil).GetVideoMediaByID), arg0)
}
