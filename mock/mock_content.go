// Code generated by MockGen. DO NOT EDIT.
// Source: go-app/app (interfaces: Content)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	schema "go-app/schema"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockContent is a mock of Content interface
type MockContent struct {
	ctrl     *gomock.Controller
	recorder *MockContentMockRecorder
}

// MockContentMockRecorder is the mock recorder for MockContent
type MockContentMockRecorder struct {
	mock *MockContent
}

// NewMockContent creates a new mock instance
func NewMockContent(ctrl *gomock.Controller) *MockContent {
	mock := &MockContent{ctrl: ctrl}
	mock.recorder = &MockContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContent) EXPECT() *MockContentMockRecorder {
	return m.recorder
}

// CreateCatalogVideoContent mocks base method
func (m *MockContent) CreateCatalogVideoContent(arg0 *schema.CreateVideoCatalogContentOpts) (*schema.CreatePebbleResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCatalogVideoContent", arg0)
	ret0, _ := ret[0].(*schema.CreatePebbleResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCatalogVideoContent indicates an expected call of CreateCatalogVideoContent
func (mr *MockContentMockRecorder) CreateCatalogVideoContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCatalogVideoContent", reflect.TypeOf((*MockContent)(nil).CreateCatalogVideoContent), arg0)
}

// CreatePebble mocks base method
func (m *MockContent) CreatePebble(arg0 *schema.CreatePebbleOpts) (*schema.CreatePebbleResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePebble", arg0)
	ret0, _ := ret[0].(*schema.CreatePebbleResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePebble indicates an expected call of CreatePebble
func (mr *MockContentMockRecorder) CreatePebble(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePebble", reflect.TypeOf((*MockContent)(nil).CreatePebble), arg0)
}

// DeletePebble mocks base method
func (m *MockContent) DeletePebble(arg0 primitive.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePebble", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePebble indicates an expected call of DeletePebble
func (mr *MockContentMockRecorder) DeletePebble(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePebble", reflect.TypeOf((*MockContent)(nil).DeletePebble), arg0)
}

// EditCatalogContent mocks base method
func (m *MockContent) EditCatalogContent(arg0 *schema.EditCatalogContentOpts) (*schema.EditCatalogContentResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCatalogContent", arg0)
	ret0, _ := ret[0].(*schema.EditCatalogContentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCatalogContent indicates an expected call of EditCatalogContent
func (mr *MockContentMockRecorder) EditCatalogContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCatalogContent", reflect.TypeOf((*MockContent)(nil).EditCatalogContent), arg0)
}

// EditPebble mocks base method
func (m *MockContent) EditPebble(arg0 *schema.EditPebbleOpts) (*schema.EditPebbleResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPebble", arg0)
	ret0, _ := ret[0].(*schema.EditPebbleResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPebble indicates an expected call of EditPebble
func (mr *MockContentMockRecorder) EditPebble(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPebble", reflect.TypeOf((*MockContent)(nil).EditPebble), arg0)
}

// GetContentByID mocks base method
func (m *MockContent) GetContentByID(arg0 primitive.ObjectID) (*schema.GetContentResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentByID", arg0)
	ret0, _ := ret[0].(*schema.GetContentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentByID indicates an expected call of GetContentByID
func (mr *MockContentMockRecorder) GetContentByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByID", reflect.TypeOf((*MockContent)(nil).GetContentByID), arg0)
}

// ProcessVideoContent mocks base method
func (m *MockContent) ProcessVideoContent(arg0 *schema.CreateVideoOpts) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessVideoContent", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessVideoContent indicates an expected call of ProcessVideoContent
func (mr *MockContentMockRecorder) ProcessVideoContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessVideoContent", reflect.TypeOf((*MockContent)(nil).ProcessVideoContent), arg0)
}
