// Code generated by MockGen. DO NOT EDIT.
// Source: go-app/app (interfaces: Inventory)

// Package mock is a generated GoMock package.
package mock

import (
	schema "go-app/schema"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockInventory is a mock of Inventory interface.
type MockInventory struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryMockRecorder
}

// MockInventoryMockRecorder is the mock recorder for MockInventory.
type MockInventoryMockRecorder struct {
	mock *MockInventory
}

// NewMockInventory creates a new mock instance.
func NewMockInventory(ctrl *gomock.Controller) *MockInventory {
	mock := &MockInventory{ctrl: ctrl}
	mock.recorder = &MockInventoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventory) EXPECT() *MockInventoryMockRecorder {
	return m.recorder
}

// CreateInventory mocks base method.
func (m *MockInventory) CreateInventory(arg0 *schema.CreateInventoryOpts) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInventory", arg0)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInventory indicates an expected call of CreateInventory.
func (mr *MockInventoryMockRecorder) CreateInventory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInventory", reflect.TypeOf((*MockInventory)(nil).CreateInventory), arg0)
}

// SetOutOfStock mocks base method.
func (m *MockInventory) SetOutOfStock(arg0 primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOutOfStock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOutOfStock indicates an expected call of SetOutOfStock.
func (mr *MockInventoryMockRecorder) SetOutOfStock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutOfStock", reflect.TypeOf((*MockInventory)(nil).SetOutOfStock), arg0)
}

// UpdateInventory mocks base method.
func (m *MockInventory) UpdateInventory(arg0 *schema.UpdateInventoryOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInventory indicates an expected call of UpdateInventory.
func (mr *MockInventoryMockRecorder) UpdateInventory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockInventory)(nil).UpdateInventory), arg0)
}
