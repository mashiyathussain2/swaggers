// Code generated by MockGen. DO NOT EDIT.
// Source: go-app/app (interfaces: IVS)

// Package mock is a generated GoMock package.
package mock

import (
	ivs "github.com/aws/aws-sdk-go/service/ivs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIVS is a mock of IVS interface
type MockIVS struct {
	ctrl     *gomock.Controller
	recorder *MockIVSMockRecorder
}

// MockIVSMockRecorder is the mock recorder for MockIVS
type MockIVSMockRecorder struct {
	mock *MockIVS
}

// NewMockIVS creates a new mock instance
func NewMockIVS(ctrl *gomock.Controller) *MockIVS {
	mock := &MockIVS{ctrl: ctrl}
	mock.recorder = &MockIVSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIVS) EXPECT() *MockIVSMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method
func (m *MockIVS) CreateChannel(arg0 string) (*ivs.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*ivs.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockIVSMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockIVS)(nil).CreateChannel), arg0)
}

// PutMetadata mocks base method
func (m *MockIVS) PutMetadata(arg0 *ivs.PutMetadataInput) (*ivs.PutMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetadata", arg0)
	ret0, _ := ret[0].(*ivs.PutMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetadata indicates an expected call of PutMetadata
func (mr *MockIVSMockRecorder) PutMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetadata", reflect.TypeOf((*MockIVS)(nil).PutMetadata), arg0)
}

// StopStream mocks base method
func (m *MockIVS) StopStream(arg0 string) (*ivs.StopStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopStream", arg0)
	ret0, _ := ret[0].(*ivs.StopStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStream indicates an expected call of StopStream
func (mr *MockIVSMockRecorder) StopStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStream", reflect.TypeOf((*MockIVS)(nil).StopStream), arg0)
}
