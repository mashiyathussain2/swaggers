// Code generated by MockGen. DO NOT EDIT.
// Source: go-app/app (interfaces: Brand)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	schema "go-app/schema"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockBrand is a mock of Brand interface
type MockBrand struct {
	ctrl     *gomock.Controller
	recorder *MockBrandMockRecorder
}

// MockBrandMockRecorder is the mock recorder for MockBrand
type MockBrandMockRecorder struct {
	mock *MockBrand
}

// NewMockBrand creates a new mock instance
func NewMockBrand(ctrl *gomock.Controller) *MockBrand {
	mock := &MockBrand{ctrl: ctrl}
	mock.recorder = &MockBrandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrand) EXPECT() *MockBrandMockRecorder {
	return m.recorder
}

// CheckBrandIDExists mocks base method
func (m *MockBrand) CheckBrandIDExists(arg0 context.Context, arg1 primitive.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBrandIDExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBrandIDExists indicates an expected call of CheckBrandIDExists
func (mr *MockBrandMockRecorder) CheckBrandIDExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBrandIDExists", reflect.TypeOf((*MockBrand)(nil).CheckBrandIDExists), arg0, arg1)
}

// CreateBrand mocks base method
func (m *MockBrand) CreateBrand(arg0 *schema.CreateBrandOpts) (*schema.CreateBrandResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBrand", arg0)
	ret0, _ := ret[0].(*schema.CreateBrandResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBrand indicates an expected call of CreateBrand
func (mr *MockBrandMockRecorder) CreateBrand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBrand", reflect.TypeOf((*MockBrand)(nil).CreateBrand), arg0)
}

// EditBrand mocks base method
func (m *MockBrand) EditBrand(arg0 *schema.EditBrandOpts) (*schema.CreateBrandResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditBrand", arg0)
	ret0, _ := ret[0].(*schema.CreateBrandResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditBrand indicates an expected call of EditBrand
func (mr *MockBrandMockRecorder) EditBrand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBrand", reflect.TypeOf((*MockBrand)(nil).EditBrand), arg0)
}
