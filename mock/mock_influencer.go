// Code generated by MockGen. DO NOT EDIT.
// Source: app/influencer.go

// Package mock is a generated GoMock package.
package mock

import (
	schema "go-app/schema"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockInfluencer is a mock of Influencer interface.
type MockInfluencer struct {
	ctrl     *gomock.Controller
	recorder *MockInfluencerMockRecorder
}

// MockInfluencerMockRecorder is the mock recorder for MockInfluencer.
type MockInfluencerMockRecorder struct {
	mock *MockInfluencer
}

// NewMockInfluencer creates a new mock instance.
func NewMockInfluencer(ctrl *gomock.Controller) *MockInfluencer {
	mock := &MockInfluencer{ctrl: ctrl}
	mock.recorder = &MockInfluencerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfluencer) EXPECT() *MockInfluencerMockRecorder {
	return m.recorder
}

// AddCreditTransaction mocks base method.
func (m *MockInfluencer) AddCreditTransaction(opts *schema.CommisionOrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCreditTransaction", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCreditTransaction indicates an expected call of AddCreditTransaction.
func (mr *MockInfluencerMockRecorder) AddCreditTransaction(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCreditTransaction", reflect.TypeOf((*MockInfluencer)(nil).AddCreditTransaction), opts)
}

// AddFollower mocks base method.
func (m *MockInfluencer) AddFollower(arg0 *schema.AddInfluencerFollowerOpts) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFollower", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFollower indicates an expected call of AddFollower.
func (mr *MockInfluencerMockRecorder) AddFollower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollower", reflect.TypeOf((*MockInfluencer)(nil).AddFollower), arg0)
}

// CheckInfluencerUsernameExists mocks base method.
func (m *MockInfluencer) CheckInfluencerUsernameExists(arg0 string, arg1 *mongo.SessionContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInfluencerUsernameExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckInfluencerUsernameExists indicates an expected call of CheckInfluencerUsernameExists.
func (mr *MockInfluencerMockRecorder) CheckInfluencerUsernameExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInfluencerUsernameExists", reflect.TypeOf((*MockInfluencer)(nil).CheckInfluencerUsernameExists), arg0, arg1)
}

// CreateInfluencer mocks base method.
func (m *MockInfluencer) CreateInfluencer(arg0 *schema.CreateInfluencerOpts) (*schema.CreateInfluencerResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInfluencer", arg0)
	ret0, _ := ret[0].(*schema.CreateInfluencerResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInfluencer indicates an expected call of CreateInfluencer.
func (mr *MockInfluencerMockRecorder) CreateInfluencer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInfluencer", reflect.TypeOf((*MockInfluencer)(nil).CreateInfluencer), arg0)
}

// DebitRequest mocks base method.
func (m *MockInfluencer) DebitRequest(opts *schema.CommissionDebitRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitRequest", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DebitRequest indicates an expected call of DebitRequest.
func (mr *MockInfluencerMockRecorder) DebitRequest(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitRequest", reflect.TypeOf((*MockInfluencer)(nil).DebitRequest), opts)
}

// EditInfluencer mocks base method.
func (m *MockInfluencer) EditInfluencer(arg0 *schema.EditInfluencerOpts) (*schema.EditInfluencerResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInfluencer", arg0)
	ret0, _ := ret[0].(*schema.EditInfluencerResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInfluencer indicates an expected call of EditInfluencer.
func (mr *MockInfluencerMockRecorder) EditInfluencer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInfluencer", reflect.TypeOf((*MockInfluencer)(nil).EditInfluencer), arg0)
}

// EditInfluencerApp mocks base method.
func (m *MockInfluencer) EditInfluencerApp(arg0 *schema.EditInfluencerAppOpts) (*schema.EditInfluencerResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInfluencerApp", arg0)
	ret0, _ := ret[0].(*schema.EditInfluencerResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInfluencerApp indicates an expected call of EditInfluencerApp.
func (mr *MockInfluencerMockRecorder) EditInfluencerApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInfluencerApp", reflect.TypeOf((*MockInfluencer)(nil).EditInfluencerApp), arg0)
}

// EditInfluencerAppV2 mocks base method.
func (m *MockInfluencer) EditInfluencerAppV2(opts *schema.EditInfluencerAppV2Opts) (*schema.EditInfluencerResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInfluencerAppV2", opts)
	ret0, _ := ret[0].(*schema.EditInfluencerResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInfluencerAppV2 indicates an expected call of EditInfluencerAppV2.
func (mr *MockInfluencerMockRecorder) EditInfluencerAppV2(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInfluencerAppV2", reflect.TypeOf((*MockInfluencer)(nil).EditInfluencerAppV2), opts)
}

// GetActiveDebitRequest mocks base method.
func (m *MockInfluencer) GetActiveDebitRequest() ([]schema.GetDebitRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDebitRequest")
	ret0, _ := ret[0].([]schema.GetDebitRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDebitRequest indicates an expected call of GetActiveDebitRequest.
func (mr *MockInfluencerMockRecorder) GetActiveDebitRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDebitRequest", reflect.TypeOf((*MockInfluencer)(nil).GetActiveDebitRequest))
}

// GetCommissionAndRevenue mocks base method.
func (m *MockInfluencer) GetCommissionAndRevenue(opts *schema.GetCommissionAndRevenueOpts) (*schema.GetCommissionAndRevenueResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommissionAndRevenue", opts)
	ret0, _ := ret[0].(*schema.GetCommissionAndRevenueResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommissionAndRevenue indicates an expected call of GetCommissionAndRevenue.
func (mr *MockInfluencerMockRecorder) GetCommissionAndRevenue(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommissionAndRevenue", reflect.TypeOf((*MockInfluencer)(nil).GetCommissionAndRevenue), opts)
}

// GetInfluencerAccountRequest mocks base method.
func (m *MockInfluencer) GetInfluencerAccountRequest() ([]schema.InfluencerAccountRequestResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluencerAccountRequest")
	ret0, _ := ret[0].([]schema.InfluencerAccountRequestResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluencerAccountRequest indicates an expected call of GetInfluencerAccountRequest.
func (mr *MockInfluencerMockRecorder) GetInfluencerAccountRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluencerAccountRequest", reflect.TypeOf((*MockInfluencer)(nil).GetInfluencerAccountRequest))
}

// GetInfluencerAccountRequestStatus mocks base method.
func (m *MockInfluencer) GetInfluencerAccountRequestStatus(id primitive.ObjectID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluencerAccountRequestStatus", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluencerAccountRequestStatus indicates an expected call of GetInfluencerAccountRequestStatus.
func (mr *MockInfluencerMockRecorder) GetInfluencerAccountRequestStatus(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluencerAccountRequestStatus", reflect.TypeOf((*MockInfluencer)(nil).GetInfluencerAccountRequestStatus), id)
}

// GetInfluencerByID mocks base method.
func (m *MockInfluencer) GetInfluencerByID(arg0 primitive.ObjectID) (*schema.GetInfluencerResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluencerByID", arg0)
	ret0, _ := ret[0].(*schema.GetInfluencerResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluencerByID indicates an expected call of GetInfluencerByID.
func (mr *MockInfluencerMockRecorder) GetInfluencerByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluencerByID", reflect.TypeOf((*MockInfluencer)(nil).GetInfluencerByID), arg0)
}

// GetInfluencerByName mocks base method.
func (m *MockInfluencer) GetInfluencerByName(arg0 string) ([]schema.GetInfluencerResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluencerByName", arg0)
	ret0, _ := ret[0].([]schema.GetInfluencerResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluencerByName indicates an expected call of GetInfluencerByName.
func (mr *MockInfluencerMockRecorder) GetInfluencerByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluencerByName", reflect.TypeOf((*MockInfluencer)(nil).GetInfluencerByName), arg0)
}

// GetInfluencerDashboard mocks base method.
func (m *MockInfluencer) GetInfluencerDashboard(opts *schema.GetInfluencerDashboardOpts) (*schema.GetInfluencerDashboardResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluencerDashboard", opts)
	ret0, _ := ret[0].(*schema.GetInfluencerDashboardResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluencerDashboard indicates an expected call of GetInfluencerDashboard.
func (mr *MockInfluencerMockRecorder) GetInfluencerDashboard(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluencerDashboard", reflect.TypeOf((*MockInfluencer)(nil).GetInfluencerDashboard), opts)
}

// GetInfluencerLedger mocks base method.
func (m *MockInfluencer) GetInfluencerLedger(opts *schema.GetInfluencerLedgerOpts) ([]schema.GetInfluencerLedgerResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluencerLedger", opts)
	ret0, _ := ret[0].([]schema.GetInfluencerLedgerResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluencerLedger indicates an expected call of GetInfluencerLedger.
func (mr *MockInfluencerMockRecorder) GetInfluencerLedger(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluencerLedger", reflect.TypeOf((*MockInfluencer)(nil).GetInfluencerLedger), opts)
}

// GetInfluencerPayoutInfo mocks base method.
func (m *MockInfluencer) GetInfluencerPayoutInfo(id primitive.ObjectID) (*schema.GetPayoutInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluencerPayoutInfo", id)
	ret0, _ := ret[0].(*schema.GetPayoutInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluencerPayoutInfo indicates an expected call of GetInfluencerPayoutInfo.
func (mr *MockInfluencerMockRecorder) GetInfluencerPayoutInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluencerPayoutInfo", reflect.TypeOf((*MockInfluencer)(nil).GetInfluencerPayoutInfo), id)
}

// GetInfluencersByID mocks base method.
func (m *MockInfluencer) GetInfluencersByID(arg0 []primitive.ObjectID) ([]schema.GetInfluencerResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluencersByID", arg0)
	ret0, _ := ret[0].([]schema.GetInfluencerResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluencersByID indicates an expected call of GetInfluencersByID.
func (mr *MockInfluencerMockRecorder) GetInfluencersByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluencersByID", reflect.TypeOf((*MockInfluencer)(nil).GetInfluencersByID), arg0)
}

// InfluencerAccountRequest mocks base method.
func (m *MockInfluencer) InfluencerAccountRequest(opts *schema.InfluencerAccountRequestOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfluencerAccountRequest", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfluencerAccountRequest indicates an expected call of InfluencerAccountRequest.
func (mr *MockInfluencerMockRecorder) InfluencerAccountRequest(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfluencerAccountRequest", reflect.TypeOf((*MockInfluencer)(nil).InfluencerAccountRequest), opts)
}

// InfluencerAccountRequestV2 mocks base method.
func (m *MockInfluencer) InfluencerAccountRequestV2(opts *schema.InfluencerAccountRequestV2Opts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfluencerAccountRequestV2", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfluencerAccountRequestV2 indicates an expected call of InfluencerAccountRequestV2.
func (mr *MockInfluencerMockRecorder) InfluencerAccountRequestV2(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfluencerAccountRequestV2", reflect.TypeOf((*MockInfluencer)(nil).InfluencerAccountRequestV2), opts)
}

// RemoveFollower mocks base method.
func (m *MockInfluencer) RemoveFollower(arg0 *schema.AddInfluencerFollowerOpts) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFollower", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFollower indicates an expected call of RemoveFollower.
func (mr *MockInfluencerMockRecorder) RemoveFollower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFollower", reflect.TypeOf((*MockInfluencer)(nil).RemoveFollower), arg0)
}

// UpdateDebitRequest mocks base method.
func (m *MockInfluencer) UpdateDebitRequest(opts *schema.UpdateCommissionDebitRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDebitRequest", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDebitRequest indicates an expected call of UpdateDebitRequest.
func (mr *MockInfluencerMockRecorder) UpdateDebitRequest(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDebitRequest", reflect.TypeOf((*MockInfluencer)(nil).UpdateDebitRequest), opts)
}

// UpdateInfluencerAccountRequestStatus mocks base method.
func (m *MockInfluencer) UpdateInfluencerAccountRequestStatus(opts *schema.UpdateInfluencerAccountRequestStatusOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfluencerAccountRequestStatus", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInfluencerAccountRequestStatus indicates an expected call of UpdateInfluencerAccountRequestStatus.
func (mr *MockInfluencerMockRecorder) UpdateInfluencerAccountRequestStatus(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfluencerAccountRequestStatus", reflect.TypeOf((*MockInfluencer)(nil).UpdateInfluencerAccountRequestStatus), opts)
}
