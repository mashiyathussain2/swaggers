// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiscountInfoResp discount info resp
//
// swagger:model DiscountInfoResp
type DiscountInfoResp struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// is active
	IsActive bool `json:"is_active,omitempty"`

	// MaxValue will only be applicable in case of PercentOffType type where you want to restrict discount value to a limit.
	MaxValue uint64 `json:"max_value,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// If discount is part of sale then ValidAfter & ValidBefore values will be inherited from sale only.
	// Format: date-time
	ValidAfter strfmt.DateTime `json:"valid_after,omitempty"`

	// valid before
	// Format: date-time
	ValidBefore strfmt.DateTime `json:"valid_before,omitempty"`

	// value
	Value uint64 `json:"value,omitempty"`

	// variants ID
	VariantsID []ObjectID `json:"variants_id"`

	// catalog id
	CatalogID ObjectID `json:"catalog_id,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// sale id
	SaleID ObjectID `json:"sale_id,omitempty"`
}

// Validate validates this discount info resp
func (m *DiscountInfoResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariantsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiscountInfoResp) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DiscountInfoResp) validateValidAfter(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_after", "body", "date-time", m.ValidAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DiscountInfoResp) validateValidBefore(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidBefore) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_before", "body", "date-time", m.ValidBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DiscountInfoResp) validateVariantsID(formats strfmt.Registry) error {
	if swag.IsZero(m.VariantsID) { // not required
		return nil
	}

	for i := 0; i < len(m.VariantsID); i++ {

		if err := m.VariantsID[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variants_id" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variants_id" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiscountInfoResp) validateCatalogID(formats strfmt.Registry) error {
	if swag.IsZero(m.CatalogID) { // not required
		return nil
	}

	if err := m.CatalogID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("catalog_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("catalog_id")
		}
		return err
	}

	return nil
}

func (m *DiscountInfoResp) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *DiscountInfoResp) validateSaleID(formats strfmt.Registry) error {
	if swag.IsZero(m.SaleID) { // not required
		return nil
	}

	if err := m.SaleID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sale_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sale_id")
		}
		return err
	}

	return nil
}

// ContextValidate validate this discount info resp based on the context it is used
func (m *DiscountInfoResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVariantsID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCatalogID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSaleID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiscountInfoResp) contextValidateVariantsID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VariantsID); i++ {

		if err := m.VariantsID[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variants_id" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variants_id" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiscountInfoResp) contextValidateCatalogID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CatalogID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("catalog_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("catalog_id")
		}
		return err
	}

	return nil
}

func (m *DiscountInfoResp) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *DiscountInfoResp) contextValidateSaleID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SaleID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sale_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sale_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiscountInfoResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiscountInfoResp) UnmarshalBinary(b []byte) error {
	var res DiscountInfoResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
