// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetBrandResp get brand resp
//
// swagger:model GetBrandResp
type GetBrandResp struct {

	// bio
	Bio string `json:"bio,omitempty"`

	// domain
	Domain string `json:"domain,omitempty"`

	// followers count
	FollowersCount uint64 `json:"followers_count,omitempty"`

	// followers ID
	FollowersID []ObjectID `json:"followers_id"`

	// following count
	FollowingCount uint64 `json:"following_count,omitempty"`

	// following ID
	FollowingID []ObjectID `json:"following_id"`

	// fulfillment c c email
	FulfillmentCCEmail []string `json:"fulfillment_cc_email"`

	// fulfillment email
	FulfillmentEmail string `json:"fulfillment_email,omitempty"`

	// l name
	LName string `json:"lname,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// registered name
	RegisteredName string `json:"registered_name,omitempty"`

	// size profiles
	SizeProfiles []*GetSizeProfileForBrandResp `json:"size_profiles"`

	// username
	Username string `json:"username,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// cover img
	CoverImg *IMG `json:"cover_img,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// logo
	Logo *IMG `json:"logo,omitempty"`

	// social account
	SocialAccount *SocialAccount `json:"social_account,omitempty"`
}

// Validate validates this get brand resp
func (m *GetBrandResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFollowersID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSizeProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoverImg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocialAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetBrandResp) validateFollowersID(formats strfmt.Registry) error {
	if swag.IsZero(m.FollowersID) { // not required
		return nil
	}

	for i := 0; i < len(m.FollowersID); i++ {

		if err := m.FollowersID[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("followers_id" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("followers_id" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetBrandResp) validateFollowingID(formats strfmt.Registry) error {
	if swag.IsZero(m.FollowingID) { // not required
		return nil
	}

	for i := 0; i < len(m.FollowingID); i++ {

		if err := m.FollowingID[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("following_id" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("following_id" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetBrandResp) validateSizeProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.SizeProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.SizeProfiles); i++ {
		if swag.IsZero(m.SizeProfiles[i]) { // not required
			continue
		}

		if m.SizeProfiles[i] != nil {
			if err := m.SizeProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("size_profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("size_profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetBrandResp) validateCoverImg(formats strfmt.Registry) error {
	if swag.IsZero(m.CoverImg) { // not required
		return nil
	}

	if m.CoverImg != nil {
		if err := m.CoverImg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cover_img")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cover_img")
			}
			return err
		}
	}

	return nil
}

func (m *GetBrandResp) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *GetBrandResp) validateLogo(formats strfmt.Registry) error {
	if swag.IsZero(m.Logo) { // not required
		return nil
	}

	if m.Logo != nil {
		if err := m.Logo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logo")
			}
			return err
		}
	}

	return nil
}

func (m *GetBrandResp) validateSocialAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.SocialAccount) { // not required
		return nil
	}

	if m.SocialAccount != nil {
		if err := m.SocialAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("social_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("social_account")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get brand resp based on the context it is used
func (m *GetBrandResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFollowersID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFollowingID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSizeProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCoverImg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSocialAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetBrandResp) contextValidateFollowersID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FollowersID); i++ {

		if err := m.FollowersID[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("followers_id" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("followers_id" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetBrandResp) contextValidateFollowingID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FollowingID); i++ {

		if err := m.FollowingID[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("following_id" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("following_id" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetBrandResp) contextValidateSizeProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SizeProfiles); i++ {

		if m.SizeProfiles[i] != nil {
			if err := m.SizeProfiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("size_profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("size_profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetBrandResp) contextValidateCoverImg(ctx context.Context, formats strfmt.Registry) error {

	if m.CoverImg != nil {
		if err := m.CoverImg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cover_img")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cover_img")
			}
			return err
		}
	}

	return nil
}

func (m *GetBrandResp) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *GetBrandResp) contextValidateLogo(ctx context.Context, formats strfmt.Registry) error {

	if m.Logo != nil {
		if err := m.Logo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logo")
			}
			return err
		}
	}

	return nil
}

func (m *GetBrandResp) contextValidateSocialAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.SocialAccount != nil {
		if err := m.SocialAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("social_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("social_account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetBrandResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetBrandResp) UnmarshalBinary(b []byte) error {
	var res GetBrandResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
