// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCustomerProfileInfoResp get customer profile info resp
//
// swagger:model GetCustomerProfileInfoResp
type GetCustomerProfileInfoResp struct {

	// brand follow count
	BrandFollowCount uint64 `json:"brand_follow_count,omitempty"`

	// brand following
	BrandFollowing []ObjectID `json:"brand_following"`

	// d o b
	// Format: date-time
	DOB strfmt.DateTime `json:"dob,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// gender
	Gender string `json:"gender,omitempty"`

	// influencer follow count
	InfluencerFollowCount uint64 `json:"influencer_follow_count,omitempty"`

	// influencer following
	InfluencerFollowing []ObjectID `json:"influencer_following"`

	// cart id
	CartID ObjectID `json:"cart_id,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// profile image
	ProfileImage *IMG `json:"profile_image,omitempty"`

	// user id
	UserID ObjectID `json:"user_id,omitempty"`

	// user info
	UserInfo *GetUserInfoResp `json:"user_info,omitempty"`
}

// Validate validates this get customer profile info resp
func (m *GetCustomerProfileInfoResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrandFollowing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDOB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfluencerFollowing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCartID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCustomerProfileInfoResp) validateBrandFollowing(formats strfmt.Registry) error {
	if swag.IsZero(m.BrandFollowing) { // not required
		return nil
	}

	for i := 0; i < len(m.BrandFollowing); i++ {

		if err := m.BrandFollowing[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brand_following" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brand_following" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetCustomerProfileInfoResp) validateDOB(formats strfmt.Registry) error {
	if swag.IsZero(m.DOB) { // not required
		return nil
	}

	if err := validate.FormatOf("dob", "body", "date-time", m.DOB.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCustomerProfileInfoResp) validateInfluencerFollowing(formats strfmt.Registry) error {
	if swag.IsZero(m.InfluencerFollowing) { // not required
		return nil
	}

	for i := 0; i < len(m.InfluencerFollowing); i++ {

		if err := m.InfluencerFollowing[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("influencer_following" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("influencer_following" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetCustomerProfileInfoResp) validateCartID(formats strfmt.Registry) error {
	if swag.IsZero(m.CartID) { // not required
		return nil
	}

	if err := m.CartID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cart_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cart_id")
		}
		return err
	}

	return nil
}

func (m *GetCustomerProfileInfoResp) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *GetCustomerProfileInfoResp) validateProfileImage(formats strfmt.Registry) error {
	if swag.IsZero(m.ProfileImage) { // not required
		return nil
	}

	if m.ProfileImage != nil {
		if err := m.ProfileImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile_image")
			}
			return err
		}
	}

	return nil
}

func (m *GetCustomerProfileInfoResp) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := m.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("user_id")
		}
		return err
	}

	return nil
}

func (m *GetCustomerProfileInfoResp) validateUserInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.UserInfo) { // not required
		return nil
	}

	if m.UserInfo != nil {
		if err := m.UserInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer profile info resp based on the context it is used
func (m *GetCustomerProfileInfoResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBrandFollowing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfluencerFollowing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCartID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfileImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCustomerProfileInfoResp) contextValidateBrandFollowing(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BrandFollowing); i++ {

		if err := m.BrandFollowing[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brand_following" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brand_following" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetCustomerProfileInfoResp) contextValidateInfluencerFollowing(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InfluencerFollowing); i++ {

		if err := m.InfluencerFollowing[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("influencer_following" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("influencer_following" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetCustomerProfileInfoResp) contextValidateCartID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CartID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cart_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cart_id")
		}
		return err
	}

	return nil
}

func (m *GetCustomerProfileInfoResp) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *GetCustomerProfileInfoResp) contextValidateProfileImage(ctx context.Context, formats strfmt.Registry) error {

	if m.ProfileImage != nil {
		if err := m.ProfileImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile_image")
			}
			return err
		}
	}

	return nil
}

func (m *GetCustomerProfileInfoResp) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UserID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("user_id")
		}
		return err
	}

	return nil
}

func (m *GetCustomerProfileInfoResp) contextValidateUserInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UserInfo != nil {
		if err := m.UserInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCustomerProfileInfoResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCustomerProfileInfoResp) UnmarshalBinary(b []byte) error {
	var res GetCustomerProfileInfoResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
