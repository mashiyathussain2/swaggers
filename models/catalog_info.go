// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CatalogInfo catalog info
//
// swagger:model CatalogInfo
type CatalogInfo struct {

	// brand name
	BrandName string `json:"brand_name,omitempty"`

	// commission rate
	CommissionRate uint64 `json:"commission_rate,omitempty"`

	// h s n code
	HSNCode string `json:"hsn_code,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// variant type
	VariantType string `json:"variant_type,omitempty"`

	// variants
	Variants []*Variant `json:"variants"`

	// brand id
	BrandID ObjectID `json:"brand_id,omitempty"`

	// discount info
	DiscountInfo *DiscountInfoResp `json:"discount_info,omitempty"`

	// eta
	Eta *ETA `json:"eta,omitempty"`

	// featured image
	FeaturedImage *IMG `json:"featured_image,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// status
	Status *Status `json:"status,omitempty"`

	// tax
	Tax *Tax `json:"tax,omitempty"`

	// transfer price
	TransferPrice *Price `json:"transfer_price,omitempty"`
}

// Validate validates this catalog info
func (m *CatalogInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVariants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrandID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeaturedImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogInfo) validateVariants(formats strfmt.Registry) error {
	if swag.IsZero(m.Variants) { // not required
		return nil
	}

	for i := 0; i < len(m.Variants); i++ {
		if swag.IsZero(m.Variants[i]) { // not required
			continue
		}

		if m.Variants[i] != nil {
			if err := m.Variants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variants" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogInfo) validateBrandID(formats strfmt.Registry) error {
	if swag.IsZero(m.BrandID) { // not required
		return nil
	}

	if err := m.BrandID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("brand_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("brand_id")
		}
		return err
	}

	return nil
}

func (m *CatalogInfo) validateDiscountInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscountInfo) { // not required
		return nil
	}

	if m.DiscountInfo != nil {
		if err := m.DiscountInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discount_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discount_info")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) validateEta(formats strfmt.Registry) error {
	if swag.IsZero(m.Eta) { // not required
		return nil
	}

	if m.Eta != nil {
		if err := m.Eta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eta")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) validateFeaturedImage(formats strfmt.Registry) error {
	if swag.IsZero(m.FeaturedImage) { // not required
		return nil
	}

	if m.FeaturedImage != nil {
		if err := m.FeaturedImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featured_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featured_image")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *CatalogInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) validateTax(formats strfmt.Registry) error {
	if swag.IsZero(m.Tax) { // not required
		return nil
	}

	if m.Tax != nil {
		if err := m.Tax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tax")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) validateTransferPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferPrice) { // not required
		return nil
	}

	if m.TransferPrice != nil {
		if err := m.TransferPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transfer_price")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this catalog info based on the context it is used
func (m *CatalogInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVariants(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBrandID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscountInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeaturedImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogInfo) contextValidateVariants(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Variants); i++ {

		if m.Variants[i] != nil {
			if err := m.Variants[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variants" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogInfo) contextValidateBrandID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BrandID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("brand_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("brand_id")
		}
		return err
	}

	return nil
}

func (m *CatalogInfo) contextValidateDiscountInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DiscountInfo != nil {
		if err := m.DiscountInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discount_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discount_info")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) contextValidateEta(ctx context.Context, formats strfmt.Registry) error {

	if m.Eta != nil {
		if err := m.Eta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eta")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) contextValidateFeaturedImage(ctx context.Context, formats strfmt.Registry) error {

	if m.FeaturedImage != nil {
		if err := m.FeaturedImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featured_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featured_image")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *CatalogInfo) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) contextValidateTax(ctx context.Context, formats strfmt.Registry) error {

	if m.Tax != nil {
		if err := m.Tax.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tax")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInfo) contextValidateTransferPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.TransferPrice != nil {
		if err := m.TransferPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transfer_price")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogInfo) UnmarshalBinary(b []byte) error {
	var res CatalogInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
