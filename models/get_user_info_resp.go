// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetUserInfoResp get user info resp
//
// swagger:model GetUserInfoResp
type GetUserInfoResp struct {

	// email
	Email string `json:"email,omitempty"`

	// email verified
	EmailVerified bool `json:"email_verified,omitempty"`

	// email verified at
	// Format: date-time
	EmailVerifiedAt strfmt.DateTime `json:"email_verified_at,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// phone verified
	PhoneVerified bool `json:"phone_verified,omitempty"`

	// phone verified at
	// Format: date-time
	PhoneVerifiedAt strfmt.DateTime `json:"phone_verified_at,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// customer id
	CustomerID ObjectID `json:"customer_id,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// phone no
	PhoneNo *PhoneNumber `json:"phone_no,omitempty"`

	// profile image
	ProfileImage *IMG `json:"profile_image,omitempty"`
}

// Validate validates this get user info resp
func (m *GetUserInfoResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailVerifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneVerifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetUserInfoResp) validateEmailVerifiedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailVerifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("email_verified_at", "body", "date-time", m.EmailVerifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetUserInfoResp) validatePhoneVerifiedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.PhoneVerifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("phone_verified_at", "body", "date-time", m.PhoneVerifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetUserInfoResp) validateCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := m.CustomerID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customer_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("customer_id")
		}
		return err
	}

	return nil
}

func (m *GetUserInfoResp) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *GetUserInfoResp) validatePhoneNo(formats strfmt.Registry) error {
	if swag.IsZero(m.PhoneNo) { // not required
		return nil
	}

	if m.PhoneNo != nil {
		if err := m.PhoneNo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone_no")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phone_no")
			}
			return err
		}
	}

	return nil
}

func (m *GetUserInfoResp) validateProfileImage(formats strfmt.Registry) error {
	if swag.IsZero(m.ProfileImage) { // not required
		return nil
	}

	if m.ProfileImage != nil {
		if err := m.ProfileImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile_image")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get user info resp based on the context it is used
func (m *GetUserInfoResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhoneNo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfileImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetUserInfoResp) contextValidateCustomerID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CustomerID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customer_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("customer_id")
		}
		return err
	}

	return nil
}

func (m *GetUserInfoResp) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *GetUserInfoResp) contextValidatePhoneNo(ctx context.Context, formats strfmt.Registry) error {

	if m.PhoneNo != nil {
		if err := m.PhoneNo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone_no")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phone_no")
			}
			return err
		}
	}

	return nil
}

func (m *GetUserInfoResp) contextValidateProfileImage(ctx context.Context, formats strfmt.Registry) error {

	if m.ProfileImage != nil {
		if err := m.ProfileImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile_image")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetUserInfoResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetUserInfoResp) UnmarshalBinary(b []byte) error {
	var res GetUserInfoResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
