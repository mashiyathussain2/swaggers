// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Variant Variant contains variants based on one property (size, color)
//
// swagger:model Variant
type Variant struct {

	// attribute
	Attribute string `json:"attribute,omitempty"`

	// is deleted
	IsDeleted bool `json:"is_deleted,omitempty"`

	// s k u
	SKU string `json:"sku,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// inventory id
	InventoryID ObjectID `json:"inventory_id,omitempty"`

	// inventory info
	InventoryInfo *Inventory `json:"inventory_info,omitempty"`
}

// Validate validates this variant
func (m *Variant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Variant) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Variant) validateInventoryID(formats strfmt.Registry) error {
	if swag.IsZero(m.InventoryID) { // not required
		return nil
	}

	if err := m.InventoryID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("inventory_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("inventory_id")
		}
		return err
	}

	return nil
}

func (m *Variant) validateInventoryInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.InventoryInfo) { // not required
		return nil
	}

	if m.InventoryInfo != nil {
		if err := m.InventoryInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventory_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inventory_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this variant based on the context it is used
func (m *Variant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInventoryID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInventoryInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Variant) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Variant) contextValidateInventoryID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InventoryID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("inventory_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("inventory_id")
		}
		return err
	}

	return nil
}

func (m *Variant) contextValidateInventoryInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.InventoryInfo != nil {
		if err := m.InventoryInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventory_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inventory_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Variant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Variant) UnmarshalBinary(b []byte) error {
	var res Variant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
