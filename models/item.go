// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Item Item is a unique catalogs data inside the cart
//
// swagger:model Item
type Item struct {

	// in stock
	InStock bool `json:"in_stock,omitempty"`

	// quantity
	Quantity uint64 `json:"quantity,omitempty"`

	// base price
	BasePrice *Price `json:"base_price,omitempty"`

	// brand id
	BrandID ObjectID `json:"brand_id,omitempty"`

	// brand info
	BrandInfo *BrandInfoResp `json:"brand_info,omitempty"`

	// catalog id
	CatalogID ObjectID `json:"catalog_id,omitempty"`

	// catalog info
	CatalogInfo *CatalogInfo `json:"catalog_info,omitempty"`

	// discount id
	DiscountID ObjectID `json:"discount_id,omitempty"`

	// discount info
	DiscountInfo *DiscountInfo `json:"discount_info,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// retail price
	RetailPrice *Price `json:"retail_price,omitempty"`

	// source
	Source *Source `json:"source,omitempty"`

	// transfer price
	TransferPrice *Price `json:"transfer_price,omitempty"`

	// variant id
	VariantID ObjectID `json:"variant_id,omitempty"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBasePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrandID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrandInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetailPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateBasePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.BasePrice) { // not required
		return nil
	}

	if m.BasePrice != nil {
		if err := m.BasePrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_price")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateBrandID(formats strfmt.Registry) error {
	if swag.IsZero(m.BrandID) { // not required
		return nil
	}

	if err := m.BrandID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("brand_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("brand_id")
		}
		return err
	}

	return nil
}

func (m *Item) validateBrandInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.BrandInfo) { // not required
		return nil
	}

	if m.BrandInfo != nil {
		if err := m.BrandInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brand_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brand_info")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateCatalogID(formats strfmt.Registry) error {
	if swag.IsZero(m.CatalogID) { // not required
		return nil
	}

	if err := m.CatalogID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("catalog_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("catalog_id")
		}
		return err
	}

	return nil
}

func (m *Item) validateCatalogInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CatalogInfo) { // not required
		return nil
	}

	if m.CatalogInfo != nil {
		if err := m.CatalogInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("catalog_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("catalog_info")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateDiscountID(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscountID) { // not required
		return nil
	}

	if err := m.DiscountID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("discount_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("discount_id")
		}
		return err
	}

	return nil
}

func (m *Item) validateDiscountInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscountInfo) { // not required
		return nil
	}

	if m.DiscountInfo != nil {
		if err := m.DiscountInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discount_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discount_info")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Item) validateRetailPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.RetailPrice) { // not required
		return nil
	}

	if m.RetailPrice != nil {
		if err := m.RetailPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retail_price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retail_price")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateTransferPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferPrice) { // not required
		return nil
	}

	if m.TransferPrice != nil {
		if err := m.TransferPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transfer_price")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateVariantID(formats strfmt.Registry) error {
	if swag.IsZero(m.VariantID) { // not required
		return nil
	}

	if err := m.VariantID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("variant_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("variant_id")
		}
		return err
	}

	return nil
}

// ContextValidate validate this item based on the context it is used
func (m *Item) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBasePrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBrandID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBrandInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCatalogID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCatalogInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscountID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscountInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetailPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariantID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) contextValidateBasePrice(ctx context.Context, formats strfmt.Registry) error {

	if m.BasePrice != nil {
		if err := m.BasePrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_price")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateBrandID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BrandID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("brand_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("brand_id")
		}
		return err
	}

	return nil
}

func (m *Item) contextValidateBrandInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.BrandInfo != nil {
		if err := m.BrandInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brand_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brand_info")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateCatalogID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CatalogID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("catalog_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("catalog_id")
		}
		return err
	}

	return nil
}

func (m *Item) contextValidateCatalogInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CatalogInfo != nil {
		if err := m.CatalogInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("catalog_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("catalog_info")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateDiscountID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DiscountID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("discount_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("discount_id")
		}
		return err
	}

	return nil
}

func (m *Item) contextValidateDiscountInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DiscountInfo != nil {
		if err := m.DiscountInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discount_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discount_info")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Item) contextValidateRetailPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.RetailPrice != nil {
		if err := m.RetailPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retail_price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retail_price")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateTransferPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.TransferPrice != nil {
		if err := m.TransferPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transfer_price")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateVariantID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VariantID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("variant_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("variant_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
