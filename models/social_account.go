// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SocialAccount SocialAccount contains info about social media pages such as facebook, instagram, etc
//
// swagger:model SocialAccount
type SocialAccount struct {

	// facebook
	Facebook *SocialMedia `json:"facebook,omitempty"`

	// instagram
	Instagram *SocialMedia `json:"instagram,omitempty"`

	// twitter
	Twitter *SocialMedia `json:"twitter,omitempty"`

	// youtube
	Youtube *SocialMedia `json:"youtube,omitempty"`
}

// Validate validates this social account
func (m *SocialAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFacebook(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstagram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTwitter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYoutube(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SocialAccount) validateFacebook(formats strfmt.Registry) error {
	if swag.IsZero(m.Facebook) { // not required
		return nil
	}

	if m.Facebook != nil {
		if err := m.Facebook.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("facebook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("facebook")
			}
			return err
		}
	}

	return nil
}

func (m *SocialAccount) validateInstagram(formats strfmt.Registry) error {
	if swag.IsZero(m.Instagram) { // not required
		return nil
	}

	if m.Instagram != nil {
		if err := m.Instagram.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instagram")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instagram")
			}
			return err
		}
	}

	return nil
}

func (m *SocialAccount) validateTwitter(formats strfmt.Registry) error {
	if swag.IsZero(m.Twitter) { // not required
		return nil
	}

	if m.Twitter != nil {
		if err := m.Twitter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twitter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("twitter")
			}
			return err
		}
	}

	return nil
}

func (m *SocialAccount) validateYoutube(formats strfmt.Registry) error {
	if swag.IsZero(m.Youtube) { // not required
		return nil
	}

	if m.Youtube != nil {
		if err := m.Youtube.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("youtube")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("youtube")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this social account based on the context it is used
func (m *SocialAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFacebook(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstagram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTwitter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateYoutube(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SocialAccount) contextValidateFacebook(ctx context.Context, formats strfmt.Registry) error {

	if m.Facebook != nil {
		if err := m.Facebook.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("facebook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("facebook")
			}
			return err
		}
	}

	return nil
}

func (m *SocialAccount) contextValidateInstagram(ctx context.Context, formats strfmt.Registry) error {

	if m.Instagram != nil {
		if err := m.Instagram.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instagram")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instagram")
			}
			return err
		}
	}

	return nil
}

func (m *SocialAccount) contextValidateTwitter(ctx context.Context, formats strfmt.Registry) error {

	if m.Twitter != nil {
		if err := m.Twitter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twitter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("twitter")
			}
			return err
		}
	}

	return nil
}

func (m *SocialAccount) contextValidateYoutube(ctx context.Context, formats strfmt.Registry) error {

	if m.Youtube != nil {
		if err := m.Youtube.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("youtube")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("youtube")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SocialAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SocialAccount) UnmarshalBinary(b []byte) error {
	var res SocialAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
