{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "\n# Error\nThe API uses standard HTTP status codes to indicate the success or failure of the API call.\nThe body of the response will be JSON in the following format:\n\n```json\n{\n\"error\": [\n{\n\"message\": \"string\",\n\"type\": \"NoType\"\n}\n],\n\"success\": false,\n\"request_id\": \"string\"\n}\n```\n\n# Responses\n__Possible Response Status Codes__\n Status Code | Description |\n-----------|-------|\n 200 | OK |\n 400 | Bad Request |\n 401 | Unauthorized |\n 500 | Server Error |\n 403 | Invalid User |",
    "title": "HYPD API:",
    "termsOfService": "https://www.hypd.store/terms-and-conditions",
    "contact": {
      "name": "tech",
      "email": "mashiyat.hussain@hypd.in"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "x-logo": {
      "altText": "HYPD STORE",
      "backgroundColor": "#FFFFFF",
      "url": "https://www.hypd.store/img/social-logo.png"
    }
  },
  "host": "catalogv2.getshitdone.in",
  "basePath": "/api",
  "paths": {
    "/app/brand/basic": {
      "post": {
        "description": "This endpoint will return brand basic information.\n\nEndpoint: /app/brand/basic\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Brand"
        ],
        "summary": "getBrandsBasic",
        "operationId": "getBrandsBasic",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetBrandsByIDBasicOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetBrandBasicESEesp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/brand/catalog": {
      "get": {
        "description": "This endpoint return the catalog information by brand ID.\n\nEndpoint: /app/brand/catalog\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCatalog"
        ],
        "summary": "getCatalogInfoByBrandId",
        "operationId": "getCatalogInfoByBrandId",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetCatalogByBrandIDOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " true",
            "schema": {
              "$ref": "#/definitions/GetCatalogBasicResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/brand/username/basic": {
      "post": {
        "description": "This endpoint will return brand basic detail by username.\n\nEndpoint: /app/brand/username/basic\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Brand"
        ],
        "summary": "getBrandsBasicByUsername",
        "operationId": "getBrandsBasicByUsername",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetBrandsByUsernameBasicOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetBrandBasicESEesp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/brand/username/{username}": {
      "get": {
        "description": "This endpoint will return brand information by the username of the brand.\n\nEndpoint: /app/brand/username/{username}\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Brand"
        ],
        "summary": "getBrandInfoByUsername",
        "operationId": "getBrandInfoByUsername",
        "parameters": [
          {
            "enum": [
              "vasu_pal_1"
            ],
            "type": "string",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetBrandsInfoByUsernameOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetBrandInfoEsResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/brand/{brandID}": {
      "get": {
        "description": "This endpoint will return information of one brand.\n\nEndpoint: /app/brand/{brandID}\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Brand"
        ],
        "summary": "getBrandInfo",
        "operationId": "getBrandInfo",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "brandID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetBrandsInfoByIDOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetBrandInfoEsResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/brands": {
      "get": {
        "description": "This endpoint will return active brand list.\n\nEndpoint: /app/brands\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Brand"
        ],
        "summary": "getActiveBrandsList",
        "operationId": "getActiveBrandsList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetBrandsListOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetActiveBrandsListESEesp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/cart": {
      "post": {
        "description": "This endpoint will add product ot the cart.\n\nEndpoint: app/cart\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cart"
        ],
        "summary": "addToCart",
        "operationId": "addToCart",
        "parameters": [
          {
            "description": "Add to cart",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Add to cart",
              "type": "object",
              "$ref": "#/definitions/AddToCartOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/addToCart"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/cart/address": {
      "post": {
        "description": "This endpoint will set the cart address of the user..\n\nEndpoint : /app/cart/address\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cart"
        ],
        "summary": "setCartAddress",
        "operationId": "setCartAddress",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddressOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " invalid user",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/cart/item": {
      "put": {
        "description": "This endpoint will update the item quantity in the cart.\n\nEndpoint : /app/cart/item\nMethod: PUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cart"
        ],
        "summary": "updateItemQty",
        "operationId": "updateItemQty",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UpdateItemQtyOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/addToCart"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " invalid user",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/cart/{userID}": {
      "get": {
        "description": "This endpoint will get the cart information according to the user id.\n\nEndpoint : /app/cart/{userID}\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cart"
        ],
        "summary": "getCartInfo",
        "operationId": "getCartInfo",
        "parameters": [
          {
            "enum": [
              "60b50277a97a2d73b211aec7"
            ],
            "type": "string",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCartInfoResp"
            }
          },
          "400": {
            "description": " Bad Request",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " invalid user",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/cart/{userID}/checkout": {
      "get": {
        "description": "This endpoint will return checkout cart.\n\nEndpoint: /app/cart/{userID}/checkout\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cart"
        ],
        "summary": "checkoutCart",
        "operationId": "checkoutCart",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "source",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "web",
              "android",
              "ios"
            ],
            "type": "string",
            "name": "platform",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "name": "isCOD",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "request_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/cart/{userID}/coupon": {
      "post": {
        "description": "This endpoint will successful apply the coupon on the product.\n\nEndpoint: /app/cart/{userID}/coupon\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "coupon"
        ],
        "summary": "applyCoupon",
        "operationId": "applyCoupon",
        "parameters": [
          {
            "enum": [
              "61dd5c77c69b0de021ce1810"
            ],
            "type": "string",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ApplyCouponOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCartInfoResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint will successful remove the coupon on the product.\n\nEndpoint: /app/cart/{userID}/coupon\n\nMethod: DELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "coupon"
        ],
        "summary": "removeCoupon",
        "operationId": "removeCoupon",
        "parameters": [
          {
            "enum": [
              "611ca3d6c2b96106c6c9ee47"
            ],
            "type": "string",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/catalog/basic": {
      "get": {
        "description": "This endpoint will return catalog basic by IDs.\n\nEndpoint: /app/catalog/basic\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCollectionCatalogV2"
        ],
        "summary": "getCatalogBasicByIds",
        "operationId": "getCatalogBasicByIds",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetCatalogByIDFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCatalogBasicResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/catalog/category/{categoryID}": {
      "get": {
        "description": "This endpoint return catalog by category ID.\n\nEndpoint: /app/catalog/category/{categoryID}\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCollectionCatalogV2"
        ],
        "summary": "getCatalogByCategoryID",
        "operationId": "getCatalogByCategoryID",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "categoryID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCatalogByCategoryIDResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/catalog/similar": {
      "get": {
        "description": "This endpoint will return similar products.\n\nEndpoint: /app/catalog/similar\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCollectionCatalogV2"
        ],
        "summary": "getSimilarProducts",
        "operationId": "getSimilarProducts",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetSimilarProducts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCatalogBasicResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/catalog/{catalogID}": {
      "get": {
        "description": "This endpoint return the catalog information by catalog ID.\n\nEndpoint: /app/catalog/{catalogID}\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCollectionCatalogV2"
        ],
        "summary": "getCatalogInfoById",
        "operationId": "getCatalogInfoById",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "categoryID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCatalogInfoResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/category/lvl1": {
      "get": {
        "description": "This endpoint return the parent app category.\n\nEndpoint: /app/category/lvl1\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCategoryCatalog"
        ],
        "summary": "getParentCategory",
        "operationId": "getParentCategory",
        "responses": {
          "200": {
            "description": " true",
            "schema": {
              "$ref": "#/definitions/GetParentCategoriesResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/category/main": {
      "get": {
        "description": "This endpoint return main category map.\n\nEndpoint: /app/category/main\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCategory"
        ],
        "summary": "getMainCategoryMap",
        "operationId": "getMainCategoryMap",
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetMainCategoriesMapResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/category/{categoryID}/lvl2": {
      "get": {
        "description": "This endpoint return main catalog by parent ID.\n\nEndpoint: /app/category/{categoryID}/lvl2\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCategoryCatalog"
        ],
        "summary": "getMainCategoryByParentID",
        "operationId": "getMainCategoryByParentID",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "categoryID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetMainCategoriesByParentIDResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/category/{categoryID}/lvl3": {
      "get": {
        "description": "This endpoint return sub category by parent ID.\n\nEndpoint: /app/category/{categoryID}/lvl3\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCategoryCatalog"
        ],
        "summary": "getSubCatergoryByParentID",
        "operationId": "getSubCatergoryByParentID",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "categoryID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetSubCategoriesByParentIDResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/check/cod": {
      "get": {
        "description": "This endpoint will check the COD eligiblity.\n\nEndpoint: /app/check/cod\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Check",
          "CODviaGoKwik"
        ],
        "summary": "checkCODEligiblity",
        "operationId": "checkCODEligiblity",
        "parameters": [
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/collections": {
      "get": {
        "description": "This endpoint will return the collections.\n\nEndpoint: /app/collections\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCollectionCatalogV2"
        ],
        "summary": "getActiveCollections",
        "operationId": "getActiveCollections",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetActiveCollectionsOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " true",
            "schema": {
              "$ref": "#/definitions/GetCollectionESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/creator/commission": {
      "get": {
        "description": "This endpoint will return commision and revenue.\n\nEndpoint: /app/creator/commission\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Creator"
        ],
        "summary": "getCommissionAndRevenue",
        "operationId": "getCommissionAndRevenue",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetCommissionAndRevenueOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCommissionAndRevenueResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/creator/dashboard": {
      "post": {
        "description": "This endpoint will return dashaboard of the influencer.\n\nEndpoint: /app/creator/dashboard\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Creator"
        ],
        "summary": "getInfluencerDashboard",
        "operationId": "getInfluencerDashboard",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetInfluencerDashboardOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerDashboardResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/creator/debit-request": {
      "post": {
        "description": "This endpoint will post the debit request.\n\nEndpoint: /app/creator/debit-request\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "DebitRequest"
        ],
        "summary": "debitRequest",
        "operationId": "debitRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CommissionDebitRequest"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/creator/ledger": {
      "get": {
        "description": "This endpoint will return the ledger details of the influencer.\n\nEndpoint: /app/creator/ledger\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Creator"
        ],
        "summary": "getInfluencerLedger",
        "operationId": "getInfluencerLedger",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetInfluencerLedgerOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerLedgerResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/creator/payout-info": {
      "get": {
        "description": "This endpoint will return influencer payout information.\n\nEndpoint: /app/creator/payout-info\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Creator"
        ],
        "summary": "getInfluencerPayoutInfo",
        "operationId": "getInfluencerPayoutInfo",
        "parameters": [
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPayoutInfoResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/customer/brand/follow": {
      "post": {
        "description": "This endpoint will follow the brand.\n\nEndpoint: /app/customer/brand/follow\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "followUnfollow"
        ],
        "summary": "followBrand",
        "operationId": "followBrand",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddBrandFollowerOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/customer/brand/unfollow": {
      "post": {
        "description": "This endpoint will unfollow the brand.\n\nEndpoint: /app/customer/brand/unfollow\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "followUnfollow"
        ],
        "summary": "unFollowBrand",
        "operationId": "unFollowBrand",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddBrandFollowerOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/customer/influencer/follow": {
      "post": {
        "description": "This endpoint will follow the influencer.\n\nEndpoint: /app/customer/influencer/follow\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "followUnfollow"
        ],
        "summary": "followInfluencer",
        "operationId": "followInfluencer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddInfluencerFollowerOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/customer/influencer/unfollow": {
      "post": {
        "description": "This endpoint will unfollow the influencer.\n\nEndpoint: /app/customer/influencer/unfollow\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "followUnfollow"
        ],
        "summary": "unFollowInfluencer",
        "operationId": "unFollowInfluencer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddInfluencerFollowerOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/customer/{customerID}": {
      "post": {
        "description": "Endpoint: /app/customer/{customerID}\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "getCustomerInfo"
        ],
        "summary": "This endpoint will return the address of the user.",
        "operationId": "getCustomerInfo",
        "parameters": [
          {
            "enum": [
              "60b50277a97a2d73b211aec7"
            ],
            "type": "string",
            "name": "customerID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " Success",
            "schema": {
              "$ref": "#/definitions/getCustomerInfo"
            }
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/app/express-checkout": {
      "post": {
        "description": "This endpoint is for express checkout.\n\nEndpoint: /app/express-checkout\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ExpressCheckout"
        ],
        "summary": "expressCheckout",
        "operationId": "expressCheckout",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExpressCheckoutOpts"
            }
          },
          {
            "type": "string",
            "description": "Platform type for example android, web or ios.",
            "name": "platform",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/express-checkout/check/cod": {
      "post": {
        "description": "This endpoint will express checkout RTO.\n\nEndpoint: /app/express-checkout/check/cod\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "CODviaGoKwik"
        ],
        "summary": "expressCheckoutRTO",
        "operationId": "expressCheckoutRTO",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExpressCheckoutWebOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/groups/catalog": {
      "get": {
        "description": "This endpoint return groups of catalog by ID.\n\nEndpoint: /app/groups/catalog\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCatalog"
        ],
        "summary": "getGroupsByCatalogID",
        "operationId": "getGroupsByCatalogID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetGroupsByCatalogIDOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetGroupsByCatalogIDResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer": {
      "put": {
        "description": "This endpoint will edit the influencer details.\n\nEndpoint: /app/influencer\n\nMethod: PUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppInfluencer"
        ],
        "summary": "editInfluencerApp",
        "operationId": "editInfluencerApp",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EditInfluencerAppOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/EditInfluencerResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Not Authorized",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/basic": {
      "get": {
        "description": "This endpoint will return influencer basic information.\n\nEndpoint: /app/influencer/basic\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppInfluencer"
        ],
        "summary": "getInfluencersBasic",
        "operationId": "getInfluencersBasic",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetInfluencersByIDBasicOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerBasicESEesp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/collection": {
      "get": {
        "description": "This endpoint will return the active influencer collection by ID.\n\nEndpoint: /app/influencer/collection\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerCollectionApp"
        ],
        "summary": "getActiveInfluencerCollectionByID",
        "operationId": "getActiveInfluencerCollectionByID",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerCollectionESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "put": {
        "description": "This endpoint will edit the influencer collection app.\n\nEndpoint: /app/influencer/collection\n\nMethod: PUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerCollectionApp"
        ],
        "summary": "editInfluencerCollectionApp",
        "operationId": "editInfluencerCollectionApp",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EditInfluencerCollectionAppOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/InfluencerCollectionResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint will create influencer collection.\n\nEndpoint: /app/influencer/collection\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerCollectionApp"
        ],
        "summary": "createInfluencerCollectionApp",
        "operationId": "createInfluencerCollectionApp",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateInfluencerCollectionOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/InfluencerCollectionResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/collections": {
      "get": {
        "description": "This endpoint will return the influencer collections.\n\nEndpoint: /app/influencer/collections\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerCollectionApp"
        ],
        "summary": "appGetInfluencerCollections",
        "operationId": "appGetInfluencerCollections",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetInfluencerCollectionsOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerCollectionRespApp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/collections/active": {
      "get": {
        "description": "This endpoint will return active influencer collections.\n\nEndpoint: /app/influencer/collections/active\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerCollectionApp"
        ],
        "summary": "getActiveInfluencerCollections",
        "operationId": "getActiveInfluencerCollections",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetActiveInfluencerCollectionsOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerCollectionESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/live": {
      "get": {
        "description": "This endpoint will return app live streams by influencerID.\n\nEndpoint: /app/influencer/live\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LiveStream"
        ],
        "summary": "getAppLiveStreamsByInfluencerID",
        "operationId": "getAppLiveStreamsByInfluencerID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetAppLiveStreamsFilter"
            }
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetAppLiveStreamInfluencerResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint will create live stream.\n\nEndpoint: /app/influencer/live\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LiveStream"
        ],
        "summary": "createLiveStreamByApp",
        "operationId": "createLiveStreamByApp",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateLiveStreamOpts"
            }
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/CreateLiveStreamResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/pebble": {
      "get": {
        "description": "This endpoint return pebbles for the creator.\n\nEndpoint: /app/influencer/pebble\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getPebblesForCreator",
        "operationId": "getPebblesForCreator",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetPebbleByInfluencerID"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "put": {
        "description": "This endpoint create pebble app.\n\nEndpoint: /app/influencer/pebble\n\nMethod: PUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "editPebbleApp",
        "operationId": "editPebbleApp",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EditPebbleAppOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/EditPebbleAppResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint create pebble in app.\n\nEndpoint: /app/influencer/pebble\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "createPebbleApp",
        "operationId": "createPebbleApp",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreatePebbleAppOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/CreatePebbleResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/products": {
      "get": {
        "description": "This endpoint will return influencer products.\n\nEndpoint: /app/influencer/products\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerCollectionKEEPER"
        ],
        "summary": "getInfluencerProducts",
        "operationId": "getInfluencerProducts",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetInfluencerProducts"
            }
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerProductESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint will add influencer products.\n\nEndpoint: /app/influencer/products\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerCollectionKEEPER"
        ],
        "summary": "addInfluencerProducts",
        "operationId": "addInfluencerProducts",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddInfluencerProductsOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint will remove influencer products.\n\nEndpoint: /app/influencer/products\n\nMethod: DELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerCollectionKEEPER"
        ],
        "summary": "removeInfluencerProducts",
        "operationId": "removeInfluencerProducts",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RemoveInfluencerProductsOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/username/basic": {
      "post": {
        "description": "This endpoint will return influencer basic information by username.\n\nEndpoint: /app/influencer/username/basic\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppInfluencer"
        ],
        "summary": "getInfluencersBasicByUsername",
        "operationId": "getInfluencersBasicByUsername",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetInfluencersByUsernameBasicOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerBasicESEesp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/username/{username}": {
      "get": {
        "description": "This endpoint will return influencer information by username.\n\nEndpoint: /app/influencer/username/{username}\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppInfluencer"
        ],
        "summary": "getInfluencerInfoByUsername",
        "operationId": "getInfluencerInfoByUsername",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetInfluencerInfoByUsernameOpts"
            }
          },
          {
            "enum": [
              "kartikay_sharma"
            ],
            "type": "string",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerInfoEsResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/influencer/{influencerID}": {
      "get": {
        "description": "This endpoint will return influencer information.\n\nEndpoint: /app/influencer/{influencerID}\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppInfluencer"
        ],
        "summary": "getInfluencerInfo",
        "operationId": "getInfluencerInfo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetInfluencerInfoByIDOpts"
            }
          },
          {
            "enum": [
              "60b50277a97a2d73b211aec7"
            ],
            "type": "string",
            "name": "influencerID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetInfluencerInfoEsResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/live/{liveID}/catalog": {
      "post": {
        "description": "This endpoint push catalog.\n\nEndpoint: /app/live/{liveID}/catalog\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LiveStream"
        ],
        "summary": "pushCatalog",
        "operationId": "pushCatalog",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "liveID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PushCatalogOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/live/{liveID}/start": {
      "get": {
        "description": "This endpoint will start live stream.\n\nEndpoint: /app/live/{liveID}/start\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LiveStream"
        ],
        "summary": "startLiveStream",
        "operationId": "startLiveStream",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "liveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/StartLiveStreamResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/live/{liveID}/stop": {
      "get": {
        "description": "This endpoint will stop the live stream.\n\nEndpoint: /app/live/{liveID}/stop\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LiveStream"
        ],
        "summary": "stopLiveStream",
        "operationId": "stopLiveStream",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "liveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/review": {
      "post": {
        "description": "This endpoint will post the app review.\n\nEndpoint: /app/review\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppReview"
        ],
        "summary": "createReview",
        "operationId": "createReview",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateReviewStoryOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/CreateReviewStoryResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/review/catalog": {
      "get": {
        "description": "This endpoint will return the review by catalog ID.\n\nEndpoint: /app/review/catalog\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppReview"
        ],
        "summary": "getReviewsByCatalogID",
        "operationId": "getReviewsByCatalogID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetReviewsByCatalogIDFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetReviewsByCatalogIDResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/sale": {
      "get": {
        "description": "This endpoint return the active sales.\n\nEndpoint: /app/sale\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppSale"
        ],
        "summary": "getAppActiveSale",
        "operationId": "getAppActiveSale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetAppActiveSaleOpts"
            }
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetSalesResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/sale/items": {
      "get": {
        "description": "This endpoint return sales catalogs.\n\nEndpoint: /app/sale/items\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppSale"
        ],
        "summary": "getSaleCatalogs",
        "operationId": "getSaleCatalogs",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetCatalogBySaleIDOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCatalogBasicResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/search": {
      "get": {
        "description": "This endpoint will search the catalog.\n\nEndpoint: /app/search\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LegacySearch"
        ],
        "summary": "search",
        "operationId": "search",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SearchOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/SearchResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/search/brand": {
      "get": {
        "description": "This endpoint will search the influencer.\n\nEndpoint: /app/search/brand\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LegacySearch"
        ],
        "summary": "searchInfluencer",
        "operationId": "searchInfluencer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SearchOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/InfluencerSearchResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/search/catalog": {
      "get": {
        "description": "This endpoint will search the catalog.\n\nEndpoint: /app/search/catalog\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LegacySearch"
        ],
        "summary": "searchCatalog",
        "operationId": "searchCatalog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SearchOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/SearchResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/search/discover": {
      "get": {
        "description": "This endpoint will search the discover.\n\nEndpoint: /app/search/discover\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LegacySearch"
        ],
        "summary": "searchDiscover",
        "operationId": "searchDiscover",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SearchOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/DiscoverSearchResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/search/hashtag": {
      "get": {
        "description": "This endpoint will search the hashtags.\n\nEndpoint: /app/search/hashtag\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LegacySearch"
        ],
        "summary": "searchHashtag",
        "operationId": "searchHashtag",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SearchOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/HashtagSearchResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/search/series": {
      "get": {
        "description": "This endpoint will search the series.\n\nEndpoint: /app/search/series\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LegacySearch"
        ],
        "summary": "searchSeries",
        "operationId": "searchSeries",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SearchOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/SeriesSearchResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/search/shop": {
      "get": {
        "description": "This endpoint will search the shop.\n\nEndpoint: /app/search/shop\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LegacySearch"
        ],
        "summary": "searchShop",
        "operationId": "searchShop",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SearchOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/ShopSearchResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/size/get": {
      "get": {
        "description": "This endpoint will return size profile.\n\nEndpoint: /app/size/get\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "GetSizeProfile"
        ],
        "summary": "getSizeProfile",
        "operationId": "getSizeProfile",
        "parameters": [
          {
            "enum": [
              "60acf7bcf928b0fa83a7f89f"
            ],
            "type": "string",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetSizeProfileResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/subcollection": {
      "get": {
        "description": "This endpoint return catalog by sub collection ID.\n\nEndpoint: /app/subcollection\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCollectionCatalogV2"
        ],
        "summary": "GetCatalogBySubCollectionID",
        "operationId": "GetCatalogBySubCollectionID",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCatalogsBySubCollectionResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/user/influencer-request": {
      "post": {
        "description": "This endpoint will post the request claim by the influencer.\n\nEndpoint: /app/user/influencer-request\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerRequest"
        ],
        "summary": "claimInfluencerRequest",
        "operationId": "claimInfluencerRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InfluencerAccountRequestOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/user/influencer-request/status": {
      "get": {
        "description": "This endpoint will return the status of the influencer request.\n\nEndpoint: /app/user/influencer-request/status\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "InfluencerRequest"
        ],
        "summary": "checkClaimInfluencerRequestStatus",
        "operationId": "checkClaimInfluencerRequestStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/wishlist": {
      "put": {
        "description": "This endpoint will add the product to the wishlist.\n\nEndpoint: /app/wishlist\n\nMethod: PUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Wishlist"
        ],
        "summary": "addToWishlist",
        "operationId": "addToWishlist",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddToWishlistOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint will delete the product from the wishlist.\n\nEndpoint: /app/wishlist\n\nMethod: DELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Wishlist"
        ],
        "summary": "removeFromWishlist",
        "operationId": "removeFromWishlist",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RemoveFromWishlistOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/app/wishlist/{userID}": {
      "get": {
        "description": "This endpoint will return the wishlist product of the user.\n\nEndpoint: /app/wishlist/{userID}\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Wishlist"
        ],
        "summary": "getWishlist",
        "operationId": "getWishlist",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/brand/check/username": {
      "get": {
        "description": "This endpoint will check the brand username exists or not.\n\nEndpoint: /brand/check/username\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "CheckUsername"
        ],
        "summary": "checkBrandUsernameExists",
        "operationId": "checkBrandUsernameExists",
        "parameters": [
          {
            "enum": [
              "falthead"
            ],
            "type": "string",
            "name": "username",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/brand/user/forgot-password": {
      "post": {
        "description": "This endpoint will help the brand to recover forget password.\n\nEndpoint: /brand/user/forgot-password\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "BrandDashAPIs"
        ],
        "summary": "brandUserForgotPassword",
        "operationId": "brandUserForgotPassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ForgotPasswordOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/brand/user/login": {
      "post": {
        "description": "This endpoint will login the brand user.\n\nEndpoint: /brand/user/login\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "BrandDashAPIs"
        ],
        "summary": "brandUserLogin",
        "operationId": "brandUserLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BrandUserLoginOpts"
            }
          },
          {
            "type": "string",
            "name": "returnToken",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " token"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/brand/user/reset-password": {
      "post": {
        "description": "This endpoint will reset the brand password.\n\nEndpoint: /brand/user/reset-password\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "BrandDashAPIs"
        ],
        "summary": "brandUserResetPassword",
        "operationId": "brandUserResetPassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ResetPasswordOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/brand/{brandID}": {
      "get": {
        "description": "This endpoint will return brand details.\n\nEndpoint: /brand/{brandID}\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Brand"
        ],
        "summary": "getBrandByID",
        "operationId": "getBrandByID",
        "parameters": [
          {
            "enum": [
              "60b50277a97a2d73b211aec7"
            ],
            "type": "string",
            "name": "brandID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " Success",
            "schema": {
              "$ref": "#/definitions/getBrandByID"
            }
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/cart/{userID}": {
      "delete": {
        "description": "This endpoint will clear the cart of the user.\n\nEndpoint: /cart/{userID}\n\nMethod: DELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cart"
        ],
        "summary": "clearCart",
        "operationId": "clearCart",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " Bad Request",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/catalog/influencer": {
      "get": {
        "description": "This endpoint return the catalogs by influencer ID.\n\nEndpoint: /catalog/influencer\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getCatalogsByInfluencerID",
        "operationId": "getCatalogsByInfluencerID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetCatalogsByInfluencerID"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " ObjectID"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/content/comment": {
      "post": {
        "description": "This endpoint will post the comment on the content.\n\nEndpoint: /content/comment\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "content"
        ],
        "summary": "createContentComment",
        "operationId": "createContentComment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateCommentOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/CreateCommentResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/content/like": {
      "post": {
        "description": "This endpoint will create like on content.\n\nEndpoint: /content/like\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "content"
        ],
        "summary": "createLike",
        "operationId": "createLike",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateLikeOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/content/view": {
      "post": {
        "description": "This endpoint will create view on content.\n\nEndpoint: /content/view\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "content"
        ],
        "summary": "createView",
        "operationId": "createView",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateViewOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/customer": {
      "put": {
        "description": "This endpoint will update the customer information.\n\nEndpoint: /customer\n\nMethod: PUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "updateCustomerInfo",
        "operationId": "updateCustomerInfo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UpdateCustomerOpts"
            }
          },
          {
            "type": "boolean",
            "description": "If value is set to True, token is omitted from response",
            "name": "isWeb",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " Success",
            "schema": {
              "$ref": "#/definitions/SuccessfulLogin"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/customer/address": {
      "put": {
        "description": "This endpoint will add the address of the customer.\n\nEndpoint: /customer/address\n\nMethod: PUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "addAddress",
        "operationId": "addAddress",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddAddressOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " Success",
            "schema": {
              "$ref": "#/definitions/AddAddressResp"
            }
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint will delete the address of the customer.\n\nEndpoint: /customer/address\n\nMethod: DELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "removeAddress",
        "operationId": "removeAddress",
        "parameters": [
          {
            "name": "address_id",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "user_id:60b50277a97a2d73b211aec7"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": " Success"
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/customer/address/edit": {
      "put": {
        "description": "This endpoint will edit the address.\n\nEndpoint : /customer/address/edit\nMethod: PUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "editAddress",
        "operationId": "editAddress",
        "parameters": [
          {
            "description": "Edit Address",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Edit Address",
              "type": "object",
              "$ref": "#/definitions/EditAddressOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/customer/apple/login": {
      "post": {
        "description": "This endpoint will login the user via apple.\n\nEndpoint: /customer/apple/login\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "loginViaApple",
        "operationId": "loginViaApple",
        "parameters": [
          {
            "description": "Login user via apple",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Login user via apple",
              "type": "object",
              "$ref": "#/definitions/LoginWithApple"
            }
          },
          {
            "type": "boolean",
            "description": "If value is set to True, token is omitted from response",
            "name": "isWeb",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " Success",
            "schema": {
              "$ref": "#/definitions/SuccessfulLogin"
            }
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/customer/email/login": {
      "post": {
        "description": "User login via email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "operationId": "loginViaEmail",
        "parameters": [
          {
            "description": "Login Via Email",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Login Via Email",
              "type": "object",
              "$ref": "#/definitions/EmailLoginCustomerOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SuccessfulLogin",
            "schema": {
              "$ref": "#/definitions/SuccessfulLogin"
            }
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/customer/email/signup": {
      "post": {
        "description": "User Signup via email\n\nEndpoint: /customer/email/signup\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "signup"
        ],
        "summary": "signUpViaEmail",
        "operationId": "signUpViaEmail",
        "parameters": [
          {
            "description": "Signup Via Email",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Signup Via Email",
              "type": "object",
              "$ref": "#/definitions/CreateUserOpts"
            }
          },
          {
            "type": "boolean",
            "description": "If value is set to True, token is omitted from response",
            "name": "isWeb",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " Success",
            "schema": {
              "$ref": "#/definitions/SuccessfulLogin"
            }
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/customer/otp/confirm": {
      "post": {
        "description": "This endpoint will confirm login via mobile otp.\n\nEndpoint: /customer/otp/confirm\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "confrimloginViaMobileOtp",
        "operationId": "confrimloginViaMobileOtp",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MobileLoginCustomerUserOpts"
            }
          },
          {
            "type": "boolean",
            "description": "If value is set to True, token is omitted from response",
            "name": "isWeb",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " Success",
            "schema": {
              "$ref": "#/definitions/SuccessfulLogin"
            }
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/customer/otp/generate": {
      "post": {
        "description": "This endpoint will generate the otp when login via mobile\n\n\nEndpoint: /customer/otp/generate\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "LoginViaMobileOTP",
        "operationId": "LoginViaMobileOTP",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GenerateMobileLoginOTPOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " payload : true"
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/customer/social/login": {
      "post": {
        "description": "This endpoint will login the user via social\n\nEndpoint: /customer/social/login\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "loginViaSocial",
        "operationId": "loginViaSocial",
        "parameters": [
          {
            "description": "Login user via social",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Login user via social",
              "type": "object",
              "$ref": "#/definitions/LoginWithSocial"
            }
          },
          {
            "type": "boolean",
            "description": "If value is set to True, token is omitted from response",
            "name": "isWeb",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " Success",
            "schema": {
              "$ref": "#/definitions/SuccessfulLogin"
            }
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/customer/{userID}/address": {
      "get": {
        "description": "This endpoint will return the address of the user.\n\nEndpoint: /customer/{userID}/address\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "GetAddress",
        "operationId": "GetAddress",
        "parameters": [
          {
            "enum": [
              "60b50277a97a2d73b211aec8"
            ],
            "type": "string",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " Success",
            "schema": {
              "$ref": "#/definitions/getAddress"
            }
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/image/upload": {
      "post": {
        "description": "This endpoint post image.\n\nEndpoint: /image/upload\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UploadImage"
        ],
        "summary": "uploadImage",
        "operationId": "uploadImage",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateImageMediaOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/CreateImageMediaResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/influencer/check/username": {
      "get": {
        "description": "This endpoint will check the influencer username exists or not.\n\nEndpoint: /influencer/check/username\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "CheckUsername"
        ],
        "summary": "checkInfluencerUsernameExists",
        "operationId": "checkInfluencerUsernameExists",
        "parameters": [
          {
            "enum": [
              "kartikay_sharma"
            ],
            "type": "string",
            "name": "username",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/inventory": {
      "post": {
        "description": "This endpoint update the internal inventory.\n\nEndpoint: /inventory\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inventory"
        ],
        "summary": "updateInventoryInternal",
        "operationId": "updateInventoryInternal",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UpdateInventoryCVOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/live": {
      "get": {
        "description": "This endpoint get the app live streams.\n\nEndpoint: /live\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "live"
        ],
        "summary": "getAppLiveStreams",
        "operationId": "getAppLiveStreams",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetAppLiveStreamsFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetAppLiveStreamResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/live/{liveID}": {
      "get": {
        "description": "This endpoint get the app live streams by ID.\n\nEndpoint: /live/{liveID}\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "live"
        ],
        "summary": "getAppLiveStreamByID",
        "operationId": "getAppLiveStreamByID",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "liveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetAppLiveStreamResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/live/{liveID}/comment": {
      "post": {
        "description": "This endpoint will post the comment on live stream.\n\nEndpoint: /live/{liveID}/comment\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "live"
        ],
        "summary": "pushComment",
        "operationId": "pushComment",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "liveID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateLiveCommentOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/live/{liveID}/join": {
      "get": {
        "description": "This endpoint will join live stream.\n\nEndpoint: /live/{liveID}/join\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "live"
        ],
        "summary": "joinLiveStream",
        "operationId": "joinLiveStream",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "liveID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/JoinLiveStreamResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/live/{liveID}/joined": {
      "post": {
        "description": "This endpoint will joined the stream.\n\nEndpoint: /live/{liveID}/joined\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "live"
        ],
        "summary": "joinedLiveStream",
        "operationId": "joinedLiveStream",
        "parameters": [
          {
            "enum": [
              "6065d4503824bf77961c21ae"
            ],
            "type": "string",
            "name": "liveID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PushJoinOpts"
            }
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "description": "This endpoint will returns the updated user info stored in the token.\n\nEndpoint: /me\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ME"
        ],
        "summary": "me",
        "operationId": "me",
        "parameters": [
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/UserClaim"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint will returns the updated user info stored in the token.\n\nEndpoint: /me\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ME"
        ],
        "summary": "updateMe",
        "operationId": "updateMe",
        "parameters": [
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If value is set to True, token is omitted from response",
            "name": "isWeb",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/UserClaim"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/pebble": {
      "get": {
        "description": "This endpoint return the pebbles.\n\nEndpoint: /pebble\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getPebbleV2",
        "operationId": "getPebbleV2",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetPebbleFilter"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/pebble/brand": {
      "get": {
        "description": "This endpoint return the pebbles of brand by ID.\n\nEndpoint: /pebble/brand\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getPebblesByBrandID",
        "operationId": "getPebblesByBrandID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetPebbleByBrandID"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/pebble/category": {
      "get": {
        "description": "This endpoint return the pebble by category IDs.\n\nEndpoint: /pebble/category\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getPebbleByCategoryID",
        "operationId": "getPebbleByCategoryID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetPebbleByCategoryIDOpts"
            }
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/pebble/collection": {
      "get": {
        "description": "This endpoint return the collection.\n\nEndpoint: /pebble/collection\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getCollections",
        "operationId": "getCollections",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetCollectionFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleCollectionESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/pebble/hashtag": {
      "get": {
        "description": "This endpoint return the pebbles by respective hashtags.\n\nEndpoint: /pebble/hashtag\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getPebblesByHashtag",
        "operationId": "getPebblesByHashtag",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetPebbleByHashtag"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/pebble/id": {
      "get": {
        "description": "This endpoint return the pebbles by id.\n\nEndpoint: /pebble/id\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getPebbleByID",
        "operationId": "getPebbleByID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetPebbleByIDFilter"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/pebble/influencer": {
      "get": {
        "description": "This endpoint return the pebbles by influencer ID.\n\nEndpoint: /pebble/influencer\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getPebblesByInfluencerID",
        "operationId": "getPebblesByInfluencerID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetPebbleByInfluencerID"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/pebble/series": {
      "get": {
        "description": "This endpoint return pebbles series.\n\nEndpoint: /pebble/series\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getPebbleSeries",
        "operationId": "getPebbleSeries",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetPebbleFilter"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleSeriesESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/pebble/series/id": {
      "get": {
        "description": "This endpoint return the pebble series by IDs.\n\nEndpoint: /pebble/series/id\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "getPebbleSeriesByIDs",
        "operationId": "getPebbleSeriesByIDs",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetSeriesByIDs"
            }
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetPebbleSeriesESResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/unicommerce/catalog": {
      "post": {
        "description": "This endpoint return the catalogs.\n\nEndpoint: /unicommerce/catalog\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UnicommerceAPIs"
        ],
        "summary": "getCatalogs",
        "operationId": "getCatalogs",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetCatalogOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetUnicommerceProductsResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/unicommerce/catalog/count": {
      "post": {
        "description": "This endpoint post the catalog count.\n\nEndpoint: /unicommerce/catalog/count\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UnicommerceAPIs"
        ],
        "summary": "getCatalogCount",
        "operationId": "getCatalogCount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetCatalogCountOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/user/auth/email/check": {
      "post": {
        "description": "Endpoint: /user/auth/email/check\n\nThis endpoint will check the user email exists or not.\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "checkEmail"
        ],
        "summary": "Check User Email for Auth",
        "operationId": "checkEmail",
        "parameters": [
          {
            "description": "Check user email",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Check user email",
              "type": "object",
              "$ref": "#/definitions/CheckEmailOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " payload : true"
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/user/auth/email/verify": {
      "post": {
        "description": "This endpoint will verify the user email.\n\nEndpoint: /user/auth/email/verify\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Verification"
        ],
        "summary": "verifyEmailAuth",
        "operationId": "verifyEmailAuth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/VerifyEmailOpts"
            }
          },
          {
            "type": "boolean",
            "description": "If value is set to True, token is omitted from response",
            "name": "isWeb",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "500": {
            "description": "Failed to login user",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/user/auth/logoutt": {
      "get": {
        "description": "This endpoint will logout the user.\n\nEndpoint: /user/auth/logoutt\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "logout"
        ],
        "summary": "logoutUser",
        "operationId": "logoutUser",
        "parameters": [
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/user/auth/phone/check": {
      "post": {
        "description": "Endpoint: /user/auth/phone/check\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "checkPhoneNo"
        ],
        "summary": "Check User Phone No for Auth",
        "operationId": "checkPhoneNo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CheckPhoneNoOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " payload : true"
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/user/auth/phone/verify": {
      "post": {
        "description": "This endpoint will verify user phone number.\n\nEndpoint: /user/auth/phone/verify\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Verification"
        ],
        "summary": "verifyPhoneNoAuth",
        "operationId": "verifyPhoneNoAuth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/VerifyPhoneNoOpts"
            }
          },
          {
            "enum": [
              true
            ],
            "type": "boolean",
            "name": "isWeb",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " payload : true"
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/user/forgot-password": {
      "post": {
        "description": "This endpoint will help the user to recover the password.\n\nEndpoint: /user/forgot-password\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Password"
        ],
        "summary": "forgotPassword",
        "operationId": "forgotPassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ForgotPasswordOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/user/influencerid": {
      "get": {
        "description": "This endpoint will return user id by influencer id.\n\nEndpoint: /user/influencerid\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "getUserIDByInfluencerID"
        ],
        "summary": "getUserIDByInfluencerID",
        "operationId": "getUserIDByInfluencerID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetUserInfoByIDOpts"
            }
          },
          {
            "type": "string",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/ObjectID"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/user/reset-password": {
      "post": {
        "description": "This endpoint will help the user reset the password.\n\nEndpoint: /user/reset-password\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Password"
        ],
        "summary": "resetPassword",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ResetPasswordOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/user/verify-email/resend": {
      "post": {
        "description": "This endpoint will resend email verification code\n\nEndpoint: /user/verify-email/resend\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Verification"
        ],
        "summary": "resendEmailVerificationCode",
        "operationId": "resendEmailVerificationCode",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ResendVerificationEmailOpts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "true"
          },
          "400": {
            "description": " Error",
            "schema": {
              "$ref": "#/definitions/CommonError"
            }
          }
        }
      }
    },
    "/v2/app/cart/checkout": {
      "get": {
        "description": "This endpoint will check the chekcout cart.\n\nEndpoint: /v2/app/cart/checkout\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "CODviaGoKwik"
        ],
        "summary": "checkoutCartV2",
        "operationId": "checkoutCartV2",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CheckoutOpts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/v2/app/catalog/basic": {
      "get": {
        "description": "This endpoint return the collection of catalog by IDs.\n\nEndpoint: /v2/app/catalog/basic\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AppCollectionCatalogV2"
        ],
        "summary": "getCollectionCatalogByIDs",
        "operationId": "getCollectionCatalogByIDs",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetCollectionCatalogByIDs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetCatalogBasicResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/v2/app/influencer": {
      "put": {
        "description": "This endpoint edit the influencer information.\n\nEndpoint: /v2/app/influencer\n\nMethod: PUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "v2Influnencer"
        ],
        "summary": "editInfluencerAppV2",
        "operationId": "editInfluencerAppV2",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EditInfluencerAppV2Opts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/EditInfluencerResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/v2/app/influencer/live": {
      "get": {
        "description": "This endpoint return app live stream by influencer ID.\n\nEndpoint: /v2/app/influencer/live\n\nMethod: GET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "LiveStream"
        ],
        "summary": "v2GetAppLiveStreamsByInfluencerID",
        "operationId": "v2GetAppLiveStreamsByInfluencerID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetAppLiveStreamsFilter"
            }
          },
          {
            "type": "string",
            "description": "Login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/GetLiveByInfluencerID"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/v2/app/influencer/pebble": {
      "post": {
        "description": "This endpoint create pebble app.\n\nEndpoint: /v2/app/influencer/pebble\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pebble"
        ],
        "summary": "createPebbleAppV2",
        "operationId": "createPebbleAppV2",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreatePebbleAppV2Opts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/CreatePebbleResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/v2/app/user/influencer-request": {
      "post": {
        "description": "This endpoint will claim the influencer request.\n\nEndpoint: /v2/app/user/influencer-request\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "v2Influnencer"
        ],
        "summary": "claimInfluencerRequestV2",
        "operationId": "claimInfluencerRequestV2",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InfluencerAccountRequestV2Opts"
            }
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " true"
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/v2/image/upload": {
      "post": {
        "description": "This endpoint post image.\n\nEndpoint: /v2/image/upload\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UploadImage"
        ],
        "summary": "uploadImageV2",
        "operationId": "uploadImageV2",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateImageMediaV2Opts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/CreateImageMediaResp"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": "Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    },
    "/web/express-checkout": {
      "post": {
        "description": "This endpoint is for express checkout for web.\n\nEndpoint: /web/express-checkout\n\nMethod: POST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ExpressCheckout"
        ],
        "summary": "expressCheckoutWeb",
        "operationId": "expressCheckoutWeb",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ExpressCheckoutWebOpts"
            }
          },
          {
            "type": "string",
            "description": "Platform type for example android, web or ios.",
            "name": "platform",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Customer login required for successful response.",
            "name": "cookie",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Token required for successful response.",
            "name": "auth token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": " OK",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": " BadRequest",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          },
          "403": {
            "description": " Invalid User",
            "schema": {
              "$ref": "#/definitions/AppErr"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AddAddressOpts": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "x-go-name": "City"
        },
        "contact_number": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "district": {
          "type": "string",
          "x-go-name": "District"
        },
        "is_billing_address": {
          "type": "boolean",
          "x-go-name": "IsBillingAddress"
        },
        "is_default_address": {
          "type": "boolean",
          "x-go-name": "IsDefaultAddress"
        },
        "is_shipping_address": {
          "type": "boolean",
          "x-go-name": "IsShippingAddress"
        },
        "line1": {
          "type": "string",
          "x-go-name": "Line1"
        },
        "line2": {
          "type": "string",
          "x-go-name": "Line2"
        },
        "plain_address": {
          "type": "string",
          "x-go-name": "PlainAddress"
        },
        "postal_code": {
          "type": "string",
          "x-go-name": "PostalCode"
        },
        "state": {
          "$ref": "#/definitions/State"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "AddAddressResp": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "x-go-name": "City"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "district": {
          "type": "string",
          "x-go-name": "District"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "line1": {
          "type": "string",
          "x-go-name": "Line1"
        },
        "line2": {
          "type": "string",
          "x-go-name": "Line2"
        },
        "phone_no": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "plain_address": {
          "type": "string",
          "x-go-name": "PlainAddress"
        },
        "postal_code": {
          "type": "string",
          "x-go-name": "PostalCode"
        },
        "state": {
          "$ref": "#/definitions/State"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "AddBrandFollowerOpts": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CustomerID"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "BrandID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "AddInfluencerFollowerOpts": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CustomerID"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "AddInfluencerProductsOpts": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "influencer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "AddToCartOpts": {
      "type": "object",
      "properties": {
        "catalog_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogID"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "quantity": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Quantity"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "variant_id": {
          "type": "string",
          "format": "Objectid",
          "x-go-name": "VariantID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "AddToWishlistOpts": {
      "type": "object",
      "properties": {
        "catalog_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogID"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Address": {
      "description": "Address address",
      "type": "object",
      "properties": {
        "city": {
          "description": "city",
          "type": "string",
          "x-go-name": "City"
        },
        "contact_number": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "display_name": {
          "description": "display name",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "district": {
          "description": "district",
          "type": "string",
          "x-go-name": "District"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "is_billing_address": {
          "description": "is billing address",
          "type": "boolean",
          "x-go-name": "IsBillingAddress"
        },
        "is_default_address": {
          "description": "is default address",
          "type": "boolean",
          "x-go-name": "IsDefaultAddress"
        },
        "is_shipping_address": {
          "description": "is shipping address",
          "type": "boolean",
          "x-go-name": "IsShippingAddress"
        },
        "line1": {
          "description": "line1",
          "type": "string",
          "x-go-name": "Line1"
        },
        "line2": {
          "description": "line2",
          "type": "string",
          "x-go-name": "Line2"
        },
        "plain_address": {
          "description": "plain address",
          "type": "string",
          "x-go-name": "PlainAddress"
        },
        "postal_code": {
          "description": "postal code",
          "type": "string",
          "x-go-name": "PostalCode"
        },
        "state": {
          "$ref": "#/definitions/State"
        }
      },
      "x-go-package": "go-app/models"
    },
    "AddressOpts": {
      "type": "object",
      "properties": {
        "address_id": {
          "type": "string",
          "format": "Objectid",
          "x-go-name": "AddressID"
        },
        "city": {
          "type": "string",
          "x-go-name": "City"
        },
        "contact_number": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "district": {
          "type": "string",
          "x-go-name": "District"
        },
        "id": {
          "type": "string",
          "format": "Objectid",
          "x-go-name": "ID"
        },
        "is_billing_address": {
          "type": "boolean",
          "x-go-name": "IsBillingAddress"
        },
        "is_default_address": {
          "type": "boolean",
          "x-go-name": "IsDefaultAddress"
        },
        "is_shipping_address": {
          "type": "boolean",
          "x-go-name": "IsShippingAddress"
        },
        "line1": {
          "type": "string",
          "x-go-name": "Line1"
        },
        "line2": {
          "type": "string",
          "x-go-name": "Line2"
        },
        "plain_address": {
          "type": "string",
          "x-go-name": "PlainAddress"
        },
        "postal_code": {
          "type": "string",
          "x-go-name": "PostalCode"
        },
        "state": {
          "$ref": "#/definitions/State"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "AppErr": {
      "type": "object",
      "properties": {
        "Error": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RequestID": {
          "type": "string"
        }
      },
      "x-go-package": "go-app/server/handler"
    },
    "ApplicableON": {
      "description": "ApplicableON applicable o n",
      "type": "object",
      "properties": {
        "ids": {
          "description": "i ds",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "IDs"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/model"
    },
    "ApplyCouponOpts": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Attribute": {
      "description": "Attribute define key value pair that defines catalog properties",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/model"
    },
    "BankInformation": {
      "type": "object",
      "properties": {
        "account_holder_name": {
          "type": "string",
          "x-go-name": "AccountHolderName"
        },
        "account_number": {
          "type": "string",
          "x-go-name": "AccountNumber"
        },
        "ifsc_code": {
          "type": "string",
          "x-go-name": "IFSCCode"
        }
      },
      "x-go-package": "go-app/model"
    },
    "BrandClaim": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/model"
    },
    "BrandInfo": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "logo": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/model"
    },
    "BrandInfoResp": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "logo": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "BrandSearchResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "logo": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "BrandUserLoginOpts": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Cart": {
      "description": "Cart cart",
      "type": "object",
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/Address"
        },
        "coupon": {
          "$ref": "#/definitions/Coupon"
        },
        "created_at": {
          "description": "created at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "items": {
          "description": "items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "x-go-name": "Items"
        },
        "shipping_address": {
          "$ref": "#/definitions/Address"
        },
        "updated_at": {
          "description": "updated at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "user_id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "x-go-package": "go-app/models"
    },
    "Catalog": {
      "description": "Catalog contains catalog specific data such as name, description, linked content, brand info, keywords, specifications, variant info etc",
      "type": "object",
      "properties": {
        "avg_rating": {
          "type": "number",
          "format": "float",
          "x-go-name": "AvgRating"
        },
        "base_price": {
          "$ref": "#/definitions/Price"
        },
        "brand_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "catalog_content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "CatalogContent"
        },
        "category_path": {
          "description": "Path stores entire path of category as a string of hyphen seperated ids Eg. /84700/80009/1282094266/1200003270\nUsing this we can store multiple category path inside a single catalog\ncategory_path: [/84700/80009/1282094266, /84701/80008/1282094267]\nmen/footwear/casual, women/footwear/casual\n\nfiltering category can be done using regex such as {$regex: \"^84700/$\"} {$regex: \"^84700/80009/$\"}",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Paths"
        },
        "commission_rate": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CommissionRate"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "eta": {
          "$ref": "#/definitions/ETA"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "filter_attrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          },
          "x-go-name": "FilterAttribute"
        },
        "hsn_code": {
          "type": "string",
          "x-go-name": "HSNCode"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Keywords"
        },
        "lname": {
          "type": "string",
          "x-go-name": "LName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "retail_price": {
          "$ref": "#/definitions/Price"
        },
        "size_profile": {
          "$ref": "#/definitions/ObjectID"
        },
        "slug": {
          "description": "slug is used in setting up catalog thumbnail image name and\nwhen sharing a catalog sharing link is generated through slug",
          "type": "string",
          "x-go-name": "Slug"
        },
        "specs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Specification"
          },
          "x-go-name": "Specifications"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "status_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Status"
          },
          "x-go-name": "StatusHistory"
        },
        "tax": {
          "$ref": "#/definitions/Tax"
        },
        "total_rating_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalRatingCount"
        },
        "transfer_price": {
          "$ref": "#/definitions/Price"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "variant_type": {
          "type": "string",
          "x-go-name": "VariantType"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variant"
          },
          "x-go-name": "Variants"
        }
      },
      "x-go-package": "go-app/model"
    },
    "CatalogContentInfoResp": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "is_processed": {
          "type": "boolean",
          "x-go-name": "IsProcessed"
        },
        "media_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "media_info": {
          "type": "object",
          "x-go-name": "MediaInfo"
        },
        "media_type": {
          "type": "string",
          "x-go-name": "MediaType"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CatalogDiscountInfo": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "max_value": {
          "description": "MaxValue will only be applicable in case of PercentOffType type where you want to restrict discount value to a limit.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxValue"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/model"
    },
    "CatalogInfo": {
      "type": "object",
      "properties": {
        "base_price": {
          "$ref": "#/definitions/Price"
        },
        "brand_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "brand_info": {
          "$ref": "#/definitions/BrandInfo"
        },
        "discount_info": {
          "$ref": "#/definitions/CatalogDiscountInfo"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "retail_price": {
          "$ref": "#/definitions/Price"
        },
        "variant_type": {
          "type": "string",
          "x-go-name": "VariantType"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantInfo"
          },
          "x-go-name": "Variants"
        }
      },
      "x-go-package": "go-app/model"
    },
    "CatalogSearchResp": {
      "type": "object",
      "properties": {
        "base_price": {
          "$ref": "#/definitions/Price"
        },
        "brand_info": {
          "$ref": "#/definitions/BrandInfoResp"
        },
        "discount_info": {
          "$ref": "#/definitions/DiscountBasicResp"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "retail_price": {
          "$ref": "#/definitions/Price"
        },
        "variants": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/definitions/ObjectID"
              }
            }
          },
          "x-go-name": "Variants"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CheckEmailOpts": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CheckPhoneNoOpts": {
      "type": "object",
      "required": [
        "phone_no"
      ],
      "properties": {
        "phone_no": {
          "$ref": "#/definitions/PhoneNoOpts"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CheckoutOpts": {
      "type": "object",
      "properties": {
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "id": {
          "type": "string",
          "format": "Objectid",
          "x-go-name": "ID"
        },
        "is_cod": {
          "type": "boolean",
          "x-go-name": "IsCOD"
        },
        "platform": {
          "type": "string",
          "x-go-name": "Platform"
        },
        "request_id": {
          "type": "string",
          "x-go-name": "RequestID"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Claim": {
      "type": "object",
      "properties": {
        "GetJWTToken": {
          "$ref": "#/definitions/Token"
        },
        "IsAdmin": {
          "type": "boolean"
        },
        "IsInternal": {
          "type": "boolean"
        },
        "IsSudo": {
          "type": "boolean"
        },
        "ToJSON": {
          "type": "string"
        }
      },
      "x-go-package": "go-app/server/auth"
    },
    "Claims": {
      "description": "For a type to be a Claims object, it must just have a Valid method that determines\nif the token is invalid for any supported reason",
      "type": "object",
      "properties": {
        "Valid": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/dgrijalva/jwt-go"
    },
    "Closer": {
      "description": "The behavior of Close after the first call is undefined.\nSpecific implementations may document their own behavior.",
      "type": "object",
      "title": "Closer is the interface that wraps the basic Close method.",
      "properties": {
        "Close": {
          "type": "string"
        }
      },
      "x-go-package": "io"
    },
    "CommissionDebitRequest": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Amount"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "payout_information": {
          "$ref": "#/definitions/PayoutInformationOpts"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CommonError": {
      "description": "CommonError common error",
      "type": "object",
      "properties": {
        "message": {
          "description": "Message of the error\nin: string",
          "type": "string",
          "x-go-name": "Message"
        },
        "status": {
          "description": "Status of the error",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "go-app/models"
    },
    "ContentSearchResp": {
      "type": "object",
      "properties": {
        "caption": {
          "type": "string",
          "x-go-name": "Caption"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "media_info": {
          "type": "object",
          "x-go-name": "MediaInfo"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Country": {
      "description": "Country represents country contains its iso representation and name of the country",
      "type": "object",
      "properties": {
        "iso_code": {
          "description": "i s o code",
          "type": "string",
          "x-go-name": "ISOCode"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/model"
    },
    "Coupon": {
      "description": "Coupon coupon",
      "type": "object",
      "properties": {
        "applicable_on": {
          "$ref": "#/definitions/ApplicableON"
        },
        "code": {
          "description": "code",
          "type": "string",
          "x-go-name": "Code"
        },
        "description": {
          "description": "description",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "max_discount": {
          "$ref": "#/definitions/Price"
        },
        "min_purchase_value": {
          "$ref": "#/definitions/Price"
        },
        "status": {
          "description": "status",
          "type": "string",
          "x-go-name": "Status"
        },
        "type": {
          "description": "type",
          "type": "string",
          "x-go-name": "Type"
        },
        "valid_after": {
          "description": "valid after\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ValidAfter"
        },
        "valid_before": {
          "description": "valid before\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ValidBefore"
        },
        "value": {
          "description": "value",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/model"
    },
    "CreateCommentOpts": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "resource_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ResourceID"
        },
        "resource_type": {
          "type": "string",
          "x-go-name": "ResourceType"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateCommentResp": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "resource_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ResourceID"
        },
        "resource_type": {
          "type": "string",
          "x-go-name": "ResourceType"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateImageMediaOpts": {
      "type": "object",
      "required": [
        "file_name",
        "base64_src"
      ],
      "properties": {
        "base64_src": {
          "type": "string",
          "x-go-name": "Base64SRC"
        },
        "file_name": {
          "type": "string",
          "x-go-name": "FileName"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateImageMediaResp": {
      "type": "object",
      "properties": {
        "cloudfront_url": {
          "type": "string",
          "x-go-name": "CloudfrontURL"
        },
        "dimensions": {
          "$ref": "#/definitions/Dimensions"
        },
        "file_name": {
          "type": "string",
          "x-go-name": "FileName"
        },
        "file_type": {
          "type": "string",
          "x-go-name": "FileType"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "src_bucket_url": {
          "type": "string",
          "x-go-name": "SRCBucketURL"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateImageMediaV2Opts": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/File"
        },
        "file_name": {
          "type": "string",
          "x-go-name": "FileName"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateInfluencerCollectionOpts": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "image": {
          "$ref": "#/definitions/Img"
        },
        "influencer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerID"
        },
        "is_draft": {
          "type": "boolean",
          "x-go-name": "IsDraft"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "order": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Order"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateLikeOpts": {
      "type": "object",
      "properties": {
        "resource_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "resource_type": {
          "type": "string",
          "x-go-name": "ResourceType"
        },
        "user_id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateLiveCommentOpts": {
      "type": "object",
      "properties": {
        "arn": {
          "type": "string",
          "x-go-name": "ARN"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "live_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "LiveID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "profile_image": {
          "$ref": "#/definitions/Img"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateLiveStreamOpts": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "featured_image": {
          "$ref": "#/definitions/Img"
        },
        "influencer_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerIDs"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "scheduled_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ScheduledAt"
        },
        "stream_end_image": {
          "$ref": "#/definitions/Img"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateLiveStreamResp": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "influencer_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerIDs"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "scheduled_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ScheduledAt"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "stream_end_image": {
          "$ref": "#/definitions/IMG"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreatePebbleAppOpts": {
      "type": "object",
      "properties": {
        "brand_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "BrandIDs"
        },
        "caption": {
          "type": "string",
          "x-go-name": "Caption"
        },
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "category_id": {
          "description": "Label         *CreatorLabelOpts    `json:\"label\" validate:\"required\"`",
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CategoryID"
        },
        "creator_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CreatorID"
        },
        "file_name": {
          "type": "string",
          "x-go-name": "FileName"
        },
        "influencer_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerIDs"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreatePebbleAppV2Opts": {
      "type": "object",
      "properties": {
        "creator_id": {
          "description": "Caption       string               `json:\"caption\" validate:\"required\"`",
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CreatorID"
        },
        "file_name": {
          "type": "string",
          "x-go-name": "FileName"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreatePebbleResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateReviewStoryOpts": {
      "type": "object",
      "properties": {
        "brand_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "BrandID"
        },
        "catalog_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogID"
        },
        "file_name": {
          "type": "string",
          "x-go-name": "FileName"
        },
        "rating": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Rating"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateReviewStoryResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "upload_url": {
          "type": "string",
          "x-go-name": "UploadURL"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateUserOpts": {
      "type": "object",
      "required": [
        "type",
        "email",
        "password",
        "confirm_password"
      ],
      "properties": {
        "confirm_password": {
          "description": "description: confirm password",
          "type": "string",
          "x-go-name": "ConfirmPassword"
        },
        "email": {
          "description": "description: email of user",
          "type": "string",
          "x-go-name": "Email"
        },
        "password": {
          "description": "description: password of user",
          "type": "string",
          "minLength": 6,
          "x-go-name": "Password"
        },
        "phone_no": {
          "$ref": "#/definitions/PhoneNoOpts"
        },
        "type": {
          "description": "description: type of user",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CreateUserResp": {
      "description": "CreateUserResp create user resp",
      "type": "object",
      "properties": {
        "email": {
          "description": "email",
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "phone_no": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "type": {
          "description": "type",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/models"
    },
    "CreateViewOpts": {
      "type": "object",
      "properties": {
        "created_at": {
          "description": "Timestamp of instance when user started watching video",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "duration": {
          "$ref": "#/definitions/Duration"
        },
        "resource_id": {
          "type": "string",
          "format": "ObejctID",
          "x-go-name": "ResourceID"
        },
        "resource_type": {
          "type": "string",
          "x-go-name": "ResourceType"
        },
        "user_id": {
          "type": "string",
          "format": "ObejctID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "CurrencyISO": {
      "description": "CurrencyISO iso representation of currency",
      "type": "string",
      "x-go-package": "go-app/model"
    },
    "DateTime": {
      "description": "DateTime is a time but it serializes to ISO8601 format with millis\nIt knows how to read 3 different variations of a RFC3339 date time.\nMost APIs we encounter want either millisecond or second precision times.\nThis just tries to make it worry-free.",
      "type": "string",
      "format": "date-time",
      "x-go-package": "github.com/go-openapi/strfmt"
    },
    "Dimensions": {
      "description": "Dimensions contains height and width of video in pixels",
      "type": "object",
      "properties": {
        "height": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Height"
        },
        "width": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Width"
        }
      },
      "x-go-package": "go-app/model"
    },
    "DiscountBasicResp": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "max_value": {
          "description": "MaxValue will only be applicable in case of PercentOffType type where you want to restrict discount value to a limit.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxValue"
        },
        "sale_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "DiscountInfo": {
      "description": "DiscountInfo contains discount data for particular variant",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "max_value": {
          "description": "max value",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxValue"
        },
        "type": {
          "description": "type",
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "description": "value",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/model"
    },
    "DiscountInfoResp": {
      "description": "DiscountInfoResp discount info resp",
      "type": "object",
      "properties": {
        "catalog_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "created_at": {
          "description": "created at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "is_active": {
          "description": "is active",
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "max_value": {
          "description": "MaxValue will only be applicable in case of PercentOffType type where you want to restrict discount value to a limit.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxValue"
        },
        "sale_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "type": {
          "description": "type",
          "type": "string",
          "x-go-name": "Type"
        },
        "valid_after": {
          "description": "If discount is part of sale then ValidAfter \u0026 ValidBefore values will be inherited from sale only.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ValidAfter"
        },
        "valid_before": {
          "description": "valid before\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ValidBefore"
        },
        "value": {
          "description": "value",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Value"
        },
        "variants_id": {
          "description": "variants ID",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "VariantsID"
        }
      },
      "x-go-package": "go-app/model"
    },
    "DiscoverSearchResp": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandSearchResp"
          },
          "x-go-name": "Brand"
        },
        "hashtags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HashtagSearchResp"
          },
          "x-go-name": "Hashtag"
        },
        "influencer": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InfluencerSearchResp"
          },
          "x-go-name": "Influencer"
        },
        "series": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeriesSearchResp"
          },
          "x-go-name": "Series"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Duration": {
      "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
      "type": "integer",
      "format": "int64",
      "x-go-package": "time"
    },
    "ETA": {
      "description": "ETA contains maximum and minimum delivery time of a catalog",
      "type": "object",
      "properties": {
        "max": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max"
        },
        "min": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Min"
        },
        "unit": {
          "type": "string",
          "x-go-name": "Unit"
        }
      },
      "x-go-package": "go-app/model"
    },
    "EditAddressOpts": {
      "type": "object",
      "required": [
        "display_name",
        "line1",
        "line2",
        "district",
        "city",
        "state",
        "postal_code",
        "country",
        "plain_address",
        "is_billing_address",
        "is_shipping_address",
        "is_default_address",
        "contact_number"
      ],
      "properties": {
        "address_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "AddressID"
        },
        "city": {
          "type": "string",
          "x-go-name": "City"
        },
        "contact_number": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "district": {
          "type": "string",
          "x-go-name": "District"
        },
        "is_billing_address": {
          "type": "boolean",
          "x-go-name": "IsBillingAddress"
        },
        "is_default_address": {
          "type": "boolean",
          "x-go-name": "IsDefaultAddress"
        },
        "is_shipping_address": {
          "type": "boolean",
          "x-go-name": "IsShippingAddress"
        },
        "line1": {
          "type": "string",
          "x-go-name": "Line1"
        },
        "line2": {
          "type": "string",
          "x-go-name": "Line2"
        },
        "plain_address": {
          "type": "string",
          "x-go-name": "PlainAddress"
        },
        "postal_code": {
          "type": "string",
          "x-go-name": "PostalCode"
        },
        "state": {
          "$ref": "#/definitions/State"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "EditInfluencerAppOpts": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "payout_information": {
          "$ref": "#/definitions/PayoutInformationOpts"
        },
        "username": {
          "description": "Name          string             `json:\"name\"`",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "EditInfluencerAppV2Opts": {
      "type": "object",
      "properties": {
        "bio": {
          "type": "string",
          "x-go-name": "Bio"
        },
        "cover_img": {
          "$ref": "#/definitions/Img"
        },
        "external_links": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ExternalLinks"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "payout_information": {
          "$ref": "#/definitions/PayoutInformationOpts"
        },
        "profile_image": {
          "$ref": "#/definitions/Img"
        },
        "social_account": {
          "$ref": "#/definitions/SocialAccountOpts"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "EditInfluencerCollectionAppOpts": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "image": {
          "$ref": "#/definitions/Img"
        },
        "influencer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "order": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Order"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "EditInfluencerResp": {
      "type": "object",
      "properties": {
        "bio": {
          "type": "string",
          "x-go-name": "Bio"
        },
        "cover_img": {
          "$ref": "#/definitions/IMG"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "external_links": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ExternalLinks"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "profile_image": {
          "$ref": "#/definitions/IMG"
        },
        "social_account": {
          "$ref": "#/definitions/SocialAccount"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "EditPebbleAppOpts": {
      "type": "object",
      "properties": {
        "brand_ids": {
          "description": "swagger: strfmt ObjectID",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "BrandIDs"
        },
        "caption": {
          "type": "string",
          "x-go-name": "Caption"
        },
        "catalog_ids": {
          "description": "swagger: strfmt ObjectID",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "CatalogIDs"
        },
        "category_id": {
          "description": "swagger: strfmt ObjectID",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "CategoryID"
        },
        "creator_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "influencer_ids": {
          "description": "swagger: strfmt ObjectID",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "InfluencerIDs"
        },
        "is_active": {
          "description": "Label         *CreatorEditLabelOpts `json:\"label\"`",
          "type": "boolean",
          "x-go-name": "IsActive"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "EditPebbleAppResp": {
      "type": "object",
      "properties": {
        "brand_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "BrandIDs"
        },
        "caption": {
          "type": "string",
          "x-go-name": "Caption"
        },
        "catalog_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "CatalogIDs"
        },
        "category_path": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Path"
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "HashTags"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "influencer_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "InfluencerIDs"
        },
        "is_active": {
          "description": "Label         *CreatorEditLabelOpts `json:\"label,omitempty\"`",
          "type": "boolean",
          "x-go-name": "IsActive"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "EmailLoginCustomerOpts": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "EmailLoginCustomerResp": {
      "description": "EmailLoginCustomerResp email login customer resp",
      "type": "object",
      "properties": {
        "token": {
          "description": "Token after successful login",
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "go-app/models"
    },
    "ExpressCheckoutOpts": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/OrderAddressOpts"
        },
        "coupon": {
          "type": "string",
          "x-go-name": "Coupon"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemExpress"
          },
          "x-go-name": "Items"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "source_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "SourceID"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "ExpressCheckoutWebOpts": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/OrderAddressOpts"
        },
        "coupon": {
          "type": "string",
          "x-go-name": "Coupon"
        },
        "is_cod": {
          "type": "boolean",
          "x-go-name": "IsCOD"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemExpress"
          },
          "x-go-name": "Items"
        },
        "request_id": {
          "type": "string",
          "x-go-name": "RequestID"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "source_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "SourceID"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "File": {
      "description": "Its contents may be either stored in memory or on disk.\nIf stored on disk, the File's underlying concrete type will be an *os.File.",
      "type": "object",
      "title": "File is an interface to access the file part of a multipart message.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "Close": {
              "type": "string"
            }
          }
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        }
      ],
      "x-go-package": "mime/multipart"
    },
    "ForgotPasswordOpts": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GenerateMobileLoginOTPOpts": {
      "type": "object",
      "required": [
        "phone_no"
      ],
      "properties": {
        "phone_no": {
          "$ref": "#/definitions/PhoneNoOpts"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetActiveBrandsListESEesp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "logo": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetActiveCollectionsOpts": {
      "type": "object",
      "properties": {
        "Gender": {
          "type": "string"
        },
        "Page": {
          "type": "integer",
          "format": "int64"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetActiveInfluencerCollectionsOpts": {
      "type": "object",
      "properties": {
        "InfluencerID": {
          "type": "string"
        },
        "Page": {
          "type": "integer",
          "format": "int64"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetAppActiveSaleOpts": {
      "type": "object",
      "properties": {
        "Genders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetAppLiveStreamInfluencerResp": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "influencer_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerIDs"
        },
        "ivs": {
          "$ref": "#/definitions/IVS"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "scheduled_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ScheduledAt"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "status": {
          "$ref": "#/definitions/StreamStatus"
        },
        "stream_end_image": {
          "$ref": "#/definitions/IMG"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetAppLiveStreamResp": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ArrayObjectID",
          "x-go-name": "CatalogIDs"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "influencer_ids": {
          "type": "string",
          "format": "ArrayObjectID",
          "x-go-name": "InfluencerIDs"
        },
        "influencer_name": {
          "type": "string",
          "x-go-name": "InfluencerName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "scheduled_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ScheduledAt"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "status": {
          "$ref": "#/definitions/StreamStatus"
        },
        "stream_end_image": {
          "$ref": "#/definitions/IMG"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetAppLiveStreamsFilter": {
      "type": "object",
      "properties": {
        "Page": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetBrandBasicESEesp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "is_followed_by_user": {
          "type": "boolean",
          "x-go-name": "IsFollowedByUser"
        },
        "logo": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetBrandInfoEsResp": {
      "type": "object",
      "properties": {
        "bio": {
          "type": "string",
          "x-go-name": "Bio"
        },
        "cover_img": {
          "$ref": "#/definitions/IMG"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "followers_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FollowersCount"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "is_followed_by_user": {
          "type": "boolean",
          "x-go-name": "IsFollowedByUser"
        },
        "lname": {
          "type": "string",
          "x-go-name": "LName"
        },
        "logo": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "social_account": {
          "$ref": "#/definitions/SocialAccount"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetBrandResp": {
      "description": "GetBrandResp get brand resp",
      "type": "object",
      "properties": {
        "bio": {
          "description": "bio",
          "type": "string",
          "x-go-name": "Bio"
        },
        "cover_img": {
          "$ref": "#/definitions/IMG"
        },
        "domain": {
          "description": "domain",
          "type": "string",
          "x-go-name": "Domain"
        },
        "followers_count": {
          "description": "followers count",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FollowersCount"
        },
        "followers_id": {
          "description": "followers ID",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "FollowersID"
        },
        "following_count": {
          "description": "following count",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FollowingCount"
        },
        "following_id": {
          "description": "following ID",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "FollowingID"
        },
        "fulfillment_cc_email": {
          "description": "fulfillment c c email",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "FulfillmentCCEmail"
        },
        "fulfillment_email": {
          "description": "fulfillment email",
          "type": "string",
          "x-go-name": "FulfillmentEmail"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "lname": {
          "description": "l name",
          "type": "string",
          "x-go-name": "LName"
        },
        "logo": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "registered_name": {
          "description": "registered name",
          "type": "string",
          "x-go-name": "RegisteredName"
        },
        "size_profiles": {
          "description": "size profiles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetSizeProfileForBrandResp"
          },
          "x-go-name": "SizeProfiles"
        },
        "social_account": {
          "$ref": "#/definitions/SocialAccount"
        },
        "username": {
          "description": "username",
          "type": "string",
          "x-go-name": "Username"
        },
        "website": {
          "description": "website",
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "go-app/models"
    },
    "GetBrandsByIDBasicOpts": {
      "type": "object",
      "properties": {
        "CustomerID": {
          "type": "string",
          "format": "ObjectID"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IDs"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetBrandsByUsernameBasicOpts": {
      "type": "object",
      "properties": {
        "CustomerID": {
          "type": "string",
          "format": "ObjectID"
        },
        "usernames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Usernames"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetBrandsInfoByIDOpts": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CustomerID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetBrandsInfoByUsernameOpts": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CustomerID"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetBrandsListOpts": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCartInfoItemsResp": {
      "type": "object",
      "properties": {
        "base_price": {
          "$ref": "#/definitions/Price"
        },
        "brand_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "brand_info": {
          "$ref": "#/definitions/BrandInfoResp"
        },
        "catalog_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "catalog_info": {
          "$ref": "#/definitions/CatalogInfo"
        },
        "discount_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "discount_info": {
          "$ref": "#/definitions/DiscountInfo"
        },
        "discounted_price": {
          "$ref": "#/definitions/Price"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "in_stock": {
          "type": "boolean",
          "x-go-name": "InStock"
        },
        "quantity": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Quantity"
        },
        "retail_price": {
          "$ref": "#/definitions/Price"
        },
        "transfer_price": {
          "$ref": "#/definitions/Price"
        },
        "variant_id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCartInfoResp": {
      "type": "object",
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/getAddress"
        },
        "coupon": {
          "$ref": "#/definitions/Coupon"
        },
        "coupon_value": {
          "$ref": "#/definitions/Price"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "grand_total": {
          "$ref": "#/definitions/Price"
        },
        "id": {
          "type": "string",
          "format": "Objectid",
          "x-go-name": "ID"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetCartInfoItemsResp"
          },
          "x-go-name": "Items"
        },
        "shipping_address": {
          "$ref": "#/definitions/getAddress"
        },
        "total_discount": {
          "$ref": "#/definitions/Price"
        },
        "total_price": {
          "$ref": "#/definitions/Price"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "user_id": {
          "type": "string",
          "format": "Objectid",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogBasicResp": {
      "type": "object",
      "properties": {
        "base_price": {
          "$ref": "#/definitions/Price"
        },
        "brand_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "BrandID"
        },
        "brand_info": {
          "$ref": "#/definitions/BrandInfoResp"
        },
        "discount_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "DiscountID"
        },
        "discount_info": {
          "$ref": "#/definitions/DiscountBasicResp"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "retail_price": {
          "$ref": "#/definitions/Price"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogByBrandIDOpts": {
      "type": "object",
      "properties": {
        "BrandID": {
          "type": "string"
        },
        "Page": {
          "type": "integer",
          "format": "uint64"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogByCategoryIDFilterResp": {
      "type": "object",
      "properties": {
        "doc_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogByCategoryIDResp": {
      "type": "object",
      "properties": {
        "brand_filter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetCatalogByCategoryIDFilterResp"
          },
          "x-go-name": "BrandFilter"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetCatalogBasicResp"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogByIDFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IDs"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogBySaleIDOpts": {
      "type": "object",
      "properties": {
        "Page": {
          "type": "integer",
          "format": "uint64"
        },
        "SaleID": {
          "type": "string"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogCountOpts": {
      "type": "object",
      "properties": {
        "brand_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "BrandID"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogInfoResp": {
      "type": "object",
      "properties": {
        "avg_rating": {
          "type": "number",
          "format": "float",
          "x-go-name": "AvgRating"
        },
        "base_price": {
          "$ref": "#/definitions/Price"
        },
        "brand_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "BrandID"
        },
        "brand_info": {
          "$ref": "#/definitions/BrandInfoResp"
        },
        "content_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogContentInfoResp"
          },
          "x-go-name": "ContentInfo"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "discount_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "DiscountID"
        },
        "discount_info": {
          "$ref": "#/definitions/DiscountBasicResp"
        },
        "eta": {
          "$ref": "#/definitions/ETA"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "filter_attr": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          },
          "x-go-name": "FilterAttribute"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "retail_price": {
          "$ref": "#/definitions/Price"
        },
        "size_profile": {
          "type": "string",
          "x-go-name": "SizeProfile"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "specs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Specification"
          },
          "x-go-name": "Specifications"
        },
        "total_rating_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalRatingCount"
        },
        "variant_type": {
          "type": "string",
          "x-go-name": "VariantType"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantInfo"
          },
          "x-go-name": "Variants"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogOpts": {
      "type": "object",
      "properties": {
        "brand_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "BrandID"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sku": {
          "type": "string",
          "x-go-name": "SKU"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogsByInfluencerID": {
      "type": "object",
      "properties": {
        "InfluencerID": {
          "type": "string"
        },
        "Page": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogsBySubCollectionInfo": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "CatalogIDs"
        },
        "featured_catalog_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "FeaturedCatalogIDs"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCatalogsBySubCollectionResp": {
      "type": "object",
      "properties": {
        "sub_collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetCatalogsBySubCollectionInfo"
          },
          "x-go-name": "SubCollections"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCollectionCatalogByIDs": {
      "type": "object",
      "properties": {
        "fid": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "FeatIDs"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IDs"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCollectionCatalogInfoResp": {
      "type": "object",
      "properties": {
        "base_price": {
          "$ref": "#/definitions/Price"
        },
        "brand_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "brand_info": {
          "$ref": "#/definitions/BrandInfoResp"
        },
        "discount_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "discount_info": {
          "$ref": "#/definitions/GetCollectionDiscountInfoResp"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "retail_price": {
          "$ref": "#/definitions/Price"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "variant_type": {
          "type": "string",
          "x-go-name": "VariantType"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetCollectionVariantResp"
          },
          "x-go-name": "Variants"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCollectionDiscountInfoResp": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "max_value": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxValue"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCollectionESResp": {
      "type": "object",
      "properties": {
        "genders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Genders"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "order": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Order"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "sub_collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetSubCollectionESResp"
          },
          "x-go-name": "SubCollections"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCollectionFilter": {
      "type": "object",
      "properties": {
        "genders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Genders"
        },
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCollectionVariantResp": {
      "type": "object",
      "properties": {
        "attribute": {
          "type": "string",
          "x-go-name": "Attribute"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "is_deleted": {
          "type": "boolean",
          "x-go-name": "IsDeleted"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCommissionAndRevenueOpts": {
      "type": "object",
      "properties": {
        "end_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndDate"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCommissionAndRevenueResp": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Balance"
        },
        "commission": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Commission"
        },
        "revenue": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Revenue"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetCustomerProfileInfoResp": {
      "description": "GetCustomerProfileInfoResp get customer profile info resp",
      "type": "object",
      "properties": {
        "brand_follow_count": {
          "description": "brand follow count",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "BrandFollowCount"
        },
        "brand_following": {
          "description": "brand following",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "BrandFollowing"
        },
        "cart_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "dob": {
          "description": "d o b\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DOB"
        },
        "full_name": {
          "description": "full name",
          "type": "string",
          "x-go-name": "FullName"
        },
        "gender": {
          "description": "gender",
          "type": "string",
          "x-go-name": "Gender"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "influencer_follow_count": {
          "description": "influencer follow count",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "InfluencerFollowCount"
        },
        "influencer_following": {
          "description": "influencer following",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "InfluencerFollowing"
        },
        "profile_image": {
          "$ref": "#/definitions/IMG"
        },
        "user_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "user_info": {
          "$ref": "#/definitions/GetUserInfoResp"
        }
      },
      "x-go-package": "go-app/models"
    },
    "GetGroupsByCatalogIDOpts": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetGroupsByCatalogIDResp": {
      "type": "object",
      "properties": {
        "basis": {
          "type": "string",
          "x-go-name": "Basis"
        },
        "catalog_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Catalog"
          },
          "x-go-name": "CatalogInfo"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerBasicESEesp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "is_followed_by_user": {
          "type": "boolean",
          "x-go-name": "IsFollowedByUser"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "profile_image": {
          "$ref": "#/definitions/IMG"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerCollectionESResp": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "image": {
          "$ref": "#/definitions/Img"
        },
        "influencer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerID"
        },
        "name": {
          "description": "InfluencerInfo *InfluencerInfo       `json:\"influencer_info\"`",
          "type": "string",
          "x-go-name": "Name"
        },
        "order": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Order"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "status": {
          "description": "CatalogInfo    []GetCatalogBasicResp `json:\"catalog_info\"`",
          "type": "string",
          "x-go-name": "Status"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerCollectionRespApp": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "image": {
          "$ref": "#/definitions/IMG"
        },
        "influencer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "order": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Order"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerCollectionsOpts": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "InfluencerID"
        },
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerContentCountResp": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Collections"
        },
        "pebbles": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pebbles"
        },
        "products": {
          "type": "number",
          "format": "double",
          "x-go-name": "Products"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerDashboardOpts": {
      "type": "object",
      "properties": {
        "end_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndDate"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerDashboardResp": {
      "type": "object",
      "properties": {
        "ledger": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetInfluencerLedgerResp"
          },
          "x-go-name": "Ledger"
        },
        "monthly_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonthlyData"
          },
          "x-go-name": "MonthlyData"
        },
        "overall_data": {
          "$ref": "#/definitions/OverallData"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerInfoByIDOpts": {
      "type": "object",
      "properties": {
        "CustomerID": {
          "type": "string",
          "format": "ObjectID"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerInfoByUsernameOpts": {
      "type": "object",
      "properties": {
        "CustomerID": {
          "type": "string",
          "format": "ObjectID"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerInfoEsResp": {
      "type": "object",
      "properties": {
        "bio": {
          "type": "string",
          "x-go-name": "Bio"
        },
        "content_count": {
          "$ref": "#/definitions/GetInfluencerContentCountResp"
        },
        "cover_img": {
          "$ref": "#/definitions/IMG"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "external_links": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ExternalLinks"
        },
        "followers_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FollowersCount"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "is_followed_by_user": {
          "type": "boolean",
          "x-go-name": "IsFollowedByUser"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "profile_image": {
          "$ref": "#/definitions/IMG"
        },
        "social_account": {
          "$ref": "#/definitions/SocialAccount"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerLedgerOpts": {
      "type": "object",
      "properties": {
        "end_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndDate"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerLedgerResp": {
      "type": "object",
      "properties": {
        "commission": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Commission"
        },
        "date": {
          "type": "string",
          "x-go-name": "Date"
        },
        "ledger": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LedgerResp"
          },
          "x-go-name": "Ledger"
        },
        "revenue": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Revenue"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerProductESResp": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "influencer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerID"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencerProducts": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "InfluencerID"
        },
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencersByIDBasicOpts": {
      "type": "object",
      "properties": {
        "CustomerID": {
          "type": "string",
          "format": "ObjectID"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IDs"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetInfluencersByUsernameBasicOpts": {
      "type": "object",
      "properties": {
        "CustomerID": {
          "type": "string",
          "format": "ObjectID"
        },
        "usernames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Usernames"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetLiveByInfluencerID": {
      "type": "object",
      "properties": {
        "completed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetAppLiveStreamInfluencerResp"
          },
          "x-go-name": "Completed"
        },
        "upcoming": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetAppLiveStreamInfluencerResp"
          },
          "x-go-name": "Upcoming"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetMainCategoriesByParentIDResp": {
      "type": "object",
      "properties": {
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetMainCategoriesMapResp": {
      "type": "object",
      "properties": {
        "ancestors_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "AncestorID"
        },
        "featured_image": {
          "$ref": "#/definitions/IMG"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parent_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ParentID"
        },
        "thumbnail": {
          "$ref": "#/definitions/IMG"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetParentCategoriesResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "thumbnail": {
          "$ref": "#/definitions/IMG"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPayoutInfoResp": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "number",
          "format": "double",
          "x-go-name": "Balance"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "payout_information": {
          "$ref": "#/definitions/PayoutInformation"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleByBrandID": {
      "type": "object",
      "properties": {
        "BrandID": {
          "type": "string"
        },
        "Page": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleByCategoryIDOpts": {
      "type": "object",
      "properties": {
        "CategoryID": {
          "type": "string"
        },
        "Page": {
          "type": "integer",
          "format": "uint64"
        },
        "Sort": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleByHashtag": {
      "type": "object",
      "properties": {
        "hashtag": {
          "type": "string",
          "x-go-name": "Hashtag"
        },
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "user_id": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleByIDFilter": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "UserID": {
          "type": "string"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleByInfluencerID": {
      "type": "object",
      "properties": {
        "InfluencerID": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "Page": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleCollectionESResp": {
      "type": "object",
      "properties": {
        "brand_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "BrandIDs"
        },
        "brand_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandInfo"
          },
          "x-go-name": "BrandInfo"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "genders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Genders"
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Hashtags"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "influencer_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InfluencerIDs"
        },
        "influencer_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InfluencerInfo"
          },
          "x-go-name": "InfluencerInfo"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "series_subcollection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeriesSubCollection"
          },
          "x-go-name": "SeriesSubCollection"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleESResp": {
      "type": "object",
      "properties": {
        "brand_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "BrandIDs"
        },
        "brand_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandInfo"
          },
          "x-go-name": "BrandInfo"
        },
        "caption": {
          "type": "string",
          "x-go-name": "Caption"
        },
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "catalog_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogInfo"
          },
          "x-go-name": "CatalogInfo"
        },
        "category_path": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Paths"
        },
        "comment_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CommentCount"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Hashtags"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "influencer_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerIDs"
        },
        "influencer_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InfluencerInfo"
          },
          "x-go-name": "InfluencerInfo"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "is_liked_by_user": {
          "type": "boolean",
          "x-go-name": "IsLikedByUser"
        },
        "like_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LikeCount"
        },
        "media_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "MediaID"
        },
        "media_info": {
          "$ref": "#/definitions/GetPebbleMediaESResp"
        },
        "media_type": {
          "type": "string",
          "x-go-name": "MediaType"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "view_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ViewCount"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleFilter": {
      "type": "object",
      "properties": {
        "IsSeries": {
          "type": "boolean"
        },
        "genders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Genders"
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Interests"
        },
        "page": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Page"
        },
        "user_id": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleMediaESResp": {
      "type": "object",
      "properties": {
        "dimensions": {
          "$ref": "#/definitions/Dimensions"
        },
        "duration": {
          "type": "number",
          "format": "float",
          "x-go-name": "Duration"
        },
        "hls_playback_url": {
          "type": "string",
          "x-go-name": "PlaybackURL"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "is_portrait": {
          "type": "boolean",
          "x-go-name": "IsPortrait"
        },
        "thumbnail_url": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ThumbnailURLS"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetPebbleSeriesESResp": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "pebble_ids": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "x-go-name": "PebbleIds"
        },
        "pebble_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetPebbleESResp"
          },
          "x-go-name": "PebbleInfo"
        },
        "thumbnail": {
          "$ref": "#/definitions/IMG"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetReviewMediaInfo": {
      "type": "object",
      "properties": {
        "dimensions": {
          "type": "object",
          "x-go-name": "Dimensions"
        },
        "duration": {
          "type": "number",
          "format": "float",
          "x-go-name": "Duration"
        },
        "hls_playback_url": {
          "type": "string",
          "x-go-name": "PlaybackURL"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetReviewStoryInfoResp": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "media_info": {
          "$ref": "#/definitions/GetReviewMediaInfo"
        },
        "media_type": {
          "type": "string",
          "x-go-name": "MediaType"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetReviewsByCatalogIDFilter": {
      "type": "object",
      "properties": {
        "CatalogID": {
          "type": "string"
        },
        "Page": {
          "type": "integer",
          "format": "uint64"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetReviewsByCatalogIDResp": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "rating": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Rating"
        },
        "story_info": {
          "$ref": "#/definitions/GetReviewStoryInfoResp"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "user_info": {
          "$ref": "#/definitions/ReviewUserInfo"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetSalesResp": {
      "type": "object",
      "properties": {
        "banner": {
          "$ref": "#/definitions/IMG"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "genders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Genders"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "order": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Order"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "valid_after": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ValidAfter"
        },
        "valid_before": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ValidBefore"
        },
        "web_banner": {
          "$ref": "#/definitions/IMG"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetSeriesByIDs": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ID"
        },
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "user_id": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetSimilarProducts": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "x-go-name": "Query"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetSizeProfileForBrandResp": {
      "description": "GetSizeProfileForBrandResp get size profile for brand resp",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "image": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "specs": {
          "description": "specs",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-go-name": "Specs"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetSizeProfileResp": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "image": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "specs": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-go-name": "Specs"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetSubCategoriesByParentIDResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetSubCollectionESResp": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "CatalogIDs"
        },
        "catalog_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetCollectionCatalogInfoResp"
          },
          "x-go-name": "CatalogInfo"
        },
        "featured_catalog_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "FeaturedCatalogIDs"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "image": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetUnicommerceProductsResp": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string",
          "x-go-name": "Brand"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "parentTitle": {
          "type": "string",
          "x-go-name": "ParentTitle"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetUnicommerceVariantResp"
          },
          "x-go-name": "Variants"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetUnicommerceVariantResp": {
      "type": "object",
      "properties": {
        "live": {
          "type": "boolean",
          "x-go-name": "Live"
        },
        "size": {
          "type": "string",
          "x-go-name": "Size"
        },
        "sku": {
          "type": "string",
          "x-go-name": "SKU"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "variantId": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetUserInfoByIDOpts": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GetUserInfoResp": {
      "description": "GetUserInfoResp get user info resp",
      "type": "object",
      "properties": {
        "customer_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "email": {
          "description": "email",
          "type": "string",
          "x-go-name": "Email"
        },
        "email_verified": {
          "description": "email verified",
          "type": "boolean",
          "x-go-name": "EmailVerified"
        },
        "email_verified_at": {
          "description": "email verified at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EmailVerifiedAt"
        },
        "full_name": {
          "description": "full name",
          "type": "string",
          "x-go-name": "FullName"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "phone_no": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "phone_verified": {
          "description": "phone verified",
          "type": "boolean",
          "x-go-name": "PhoneVerified"
        },
        "phone_verified_at": {
          "description": "phone verified at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "PhoneVerifiedAt"
        },
        "profile_image": {
          "$ref": "#/definitions/IMG"
        },
        "role": {
          "description": "role",
          "type": "string",
          "x-go-name": "Role"
        },
        "type": {
          "description": "type",
          "type": "string",
          "x-go-name": "Type"
        },
        "username": {
          "description": "username",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GoKwikCreateOrderResp": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/GoKwikOrderData"
        },
        "statusCode": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "StatusCode"
        },
        "statusMessage": {
          "type": "string",
          "x-go-name": "StatusMessage"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "GoKwikOrderData": {
      "type": "object",
      "properties": {
        "gokwik_oid": {
          "type": "string",
          "x-go-name": "GokwikOID"
        },
        "mid": {
          "type": "string",
          "x-go-name": "Mid"
        },
        "moid": {
          "type": "string",
          "x-go-name": "Moid"
        },
        "order_status": {
          "type": "string",
          "x-go-name": "OrderStatus"
        },
        "order_type": {
          "type": "string",
          "x-go-name": "OrderType"
        },
        "phone": {
          "type": "string",
          "x-go-name": "Phone"
        },
        "request_id": {
          "type": "string",
          "x-go-name": "RequestID"
        },
        "total": {
          "type": "string",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "HashtagSearchResp": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "x-go-name": "Text"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "IMG": {
      "description": "IMG contains image url, src, height and id",
      "type": "object",
      "properties": {
        "height": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Height"
        },
        "src": {
          "type": "string",
          "x-go-name": "SRC"
        },
        "width": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Width"
        }
      },
      "x-go-package": "go-app/model"
    },
    "IVS": {
      "description": "IVS contains aws IVS specific configuration",
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/IVSChannel"
        },
        "ingestion": {
          "$ref": "#/definitions/IVSIngest"
        },
        "playback": {
          "$ref": "#/definitions/IVSPlayback"
        }
      },
      "x-go-package": "go-app/model"
    },
    "IVSChannel": {
      "description": "IVSChannel contains channel specific configuration",
      "type": "object",
      "properties": {
        "arn": {
          "type": "string",
          "x-go-name": "ARN"
        },
        "latency_mode": {
          "type": "string",
          "x-go-name": "LatencyMode"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "playback_authorization": {
          "type": "boolean",
          "x-go-name": "PlaybackAuthorization"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/model"
    },
    "IVSIngest": {
      "description": "IVSIngest contains channel video ingestion specific configuration",
      "type": "object",
      "properties": {
        "server_url": {
          "type": "string",
          "x-go-name": "IngestURL"
        },
        "stream_key": {
          "type": "string",
          "x-go-name": "StreamKey"
        }
      },
      "x-go-package": "go-app/model"
    },
    "IVSPlayback": {
      "description": "IVSPlayback contains IVS playback specific configuration",
      "type": "object",
      "properties": {
        "playback_url": {
          "type": "string",
          "x-go-name": "PlaybackURL"
        }
      },
      "x-go-package": "go-app/model"
    },
    "Img": {
      "description": "Img contains image src url",
      "type": "object",
      "properties": {
        "src": {
          "type": "string",
          "x-go-name": "SRC"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "InfluencerAccountRequestOpts": {
      "type": "object",
      "properties": {
        "Source": {
          "type": "object"
        },
        "bio": {
          "type": "string",
          "x-go-name": "Bio"
        },
        "cover_image": {
          "$ref": "#/definitions/Img"
        },
        "customer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CustomerID"
        },
        "full_name": {
          "description": "InfluencerID  primitive.ObjectID `json:\"influencer_id\" validate:\"required\"`",
          "type": "string",
          "x-go-name": "FullName"
        },
        "profile_image": {
          "$ref": "#/definitions/Img"
        },
        "social_account": {
          "$ref": "#/definitions/SocialAccountOpts"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "InfluencerAccountRequestV2Opts": {
      "type": "object",
      "properties": {
        "Source": {
          "type": "object"
        },
        "area_of_expertise": {
          "type": "string",
          "x-go-name": "AreaOfExpertise"
        },
        "cover_image": {
          "$ref": "#/definitions/Img"
        },
        "customer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CustomerID"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "phone": {
          "$ref": "#/definitions/PhoneNoOpts"
        },
        "profile_image": {
          "$ref": "#/definitions/Img"
        },
        "social_account": {
          "$ref": "#/definitions/SocialAccountOpts"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "InfluencerCollectionResp": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "image": {
          "$ref": "#/definitions/IMG"
        },
        "influencer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "order": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Order"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "InfluencerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "profile_image": {
          "$ref": "#/definitions/IMG"
        }
      },
      "x-go-package": "go-app/model"
    },
    "InfluencerSearchResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "profile_image": {
          "$ref": "#/definitions/IMG"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Inventory": {
      "description": "Inventory contains inventory specific data",
      "type": "object",
      "properties": {
        "catalog_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "sku": {
          "type": "string",
          "x-go-name": "SKU"
        },
        "status": {
          "$ref": "#/definitions/InventoryStatus"
        },
        "unit_in_stock": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UnitInStock"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "variant_id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "x-go-package": "go-app/model"
    },
    "InventoryStatus": {
      "description": "InventoryStatus stores catalog status such as out_of_stock, in_stock, inactive",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/model"
    },
    "Item": {
      "description": "Item is a unique catalogs data inside the cart",
      "type": "object",
      "properties": {
        "base_price": {
          "$ref": "#/definitions/Price"
        },
        "brand_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "brand_info": {
          "$ref": "#/definitions/BrandInfoResp"
        },
        "catalog_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "catalog_info": {
          "$ref": "#/definitions/CatalogInfo"
        },
        "discount_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "discount_info": {
          "$ref": "#/definitions/DiscountInfo"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "in_stock": {
          "description": "in stock",
          "type": "boolean",
          "x-go-name": "InStock"
        },
        "quantity": {
          "description": "quantity",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Quantity"
        },
        "retail_price": {
          "$ref": "#/definitions/Price"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "transfer_price": {
          "$ref": "#/definitions/Price"
        },
        "variant_id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "x-go-package": "go-app/model"
    },
    "ItemExpress": {
      "type": "object",
      "properties": {
        "catalog_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Quantity"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "variant_id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "JoinLiveStreamResp": {
      "type": "object",
      "properties": {
        "arn": {
          "type": "string",
          "x-go-name": "ARN"
        },
        "playbackURL": {
          "type": "string",
          "x-go-name": "PlaybackURL"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "LedgerResp": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "number",
          "format": "double",
          "x-go-name": "Balance"
        },
        "catalog_info": {
          "$ref": "#/definitions/CatalogInfo"
        },
        "commission_value": {
          "type": "number",
          "format": "double",
          "x-go-name": "CommissionValue"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "debit_amount": {
          "type": "number",
          "format": "double",
          "x-go-name": "DebitAmount"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "order_no": {
          "type": "string",
          "x-go-name": "OrderNo"
        },
        "order_value": {
          "$ref": "#/definitions/Price"
        },
        "payout_information": {
          "$ref": "#/definitions/PayoutInformation"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "LoginWithApple": {
      "type": "object",
      "required": [
        "type",
        "apple_id"
      ],
      "properties": {
        "apple_id": {
          "type": "string",
          "x-go-name": "AppleID"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "LoginWithSocial": {
      "type": "object",
      "required": [
        "type",
        "email",
        "full_name",
        "profile_image"
      ],
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "profile_image": {
          "$ref": "#/definitions/Img"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "MobileLoginCustomerUserOpts": {
      "type": "object",
      "required": [
        "phone_no",
        "otp"
      ],
      "properties": {
        "otp": {
          "type": "string",
          "x-go-name": "OTP"
        },
        "phone_no": {
          "$ref": "#/definitions/PhoneNoOpts"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "MonthlyData": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Count"
        },
        "month": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Month"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "ObjectID": {
      "type": "array",
      "title": "ObjectID is the BSON ObjectID type.",
      "items": {
        "type": "integer",
        "format": "uint8"
      },
      "x-go-package": "go.mongodb.org/mongo-driver/bson/primitive"
    },
    "OrderAddressOpts": {
      "description": "OrderAddressOpts contains field required to add/edit the address of the user's cart",
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "x-go-name": "City"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "district": {
          "type": "string",
          "x-go-name": "District"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "line1": {
          "type": "string",
          "x-go-name": "Line1"
        },
        "line2": {
          "type": "string",
          "x-go-name": "Line2"
        },
        "phone_no": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "plain_address": {
          "type": "string",
          "x-go-name": "PlainAddress"
        },
        "postal_code": {
          "type": "string",
          "x-go-name": "PostalCode"
        },
        "state": {
          "$ref": "#/definitions/State"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "OrderInfo": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "x-go-name": "Amount"
        },
        "go_kwik": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GoKwikCreateOrderResp"
          },
          "x-go-name": "GoKwikResponse"
        },
        "order_id": {
          "type": "string",
          "x-go-name": "OrderID"
        },
        "razorpay_id": {
          "type": "string",
          "x-go-name": "RazorpayID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "OverallData": {
      "type": "object",
      "properties": {
        "revenue": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Revenue"
        },
        "total_commission": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalCommission"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "PayoutInformation": {
      "type": "object",
      "properties": {
        "bank_information": {
          "$ref": "#/definitions/BankInformation"
        },
        "pan_card": {
          "type": "string",
          "x-go-name": "PanCard"
        },
        "upi_id": {
          "type": "string",
          "x-go-name": "UPIID"
        }
      },
      "x-go-package": "go-app/model"
    },
    "PayoutInformationOpts": {
      "type": "object",
      "properties": {
        "bank_information": {
          "$ref": "#/definitions/BankInformation"
        },
        "pan_card": {
          "type": "string",
          "x-go-name": "PanCard"
        },
        "upi_id": {
          "type": "string",
          "x-go-name": "UPIID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "PhoneNoOpts": {
      "type": "object",
      "required": [
        "prefix",
        "number"
      ],
      "properties": {
        "number": {
          "description": "Number of the user\nin: string",
          "type": "string",
          "x-go-name": "Number"
        },
        "prefix": {
          "description": "Prefix of the number\nin: string",
          "type": "string",
          "x-go-name": "Prefix"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "PhoneNumber": {
      "description": "PhoneNumber represents a contact number contains prefix (country code) and phone number",
      "type": "object",
      "properties": {
        "number": {
          "description": "number",
          "type": "string",
          "x-go-name": "Number"
        },
        "prefix": {
          "description": "prefix",
          "type": "string",
          "x-go-name": "Prefix"
        }
      },
      "x-go-package": "go-app/model"
    },
    "Price": {
      "description": "Price represents cost of an entity",
      "type": "object",
      "properties": {
        "iso": {
          "$ref": "#/definitions/CurrencyISO"
        },
        "value": {
          "type": "number",
          "format": "float",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/model"
    },
    "PushCatalogOpts": {
      "type": "object",
      "properties": {
        "arn": {
          "type": "string",
          "x-go-name": "ARN"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "PushJoinOpts": {
      "type": "object",
      "properties": {
        "arn": {
          "type": "string",
          "x-go-name": "ARN"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Reader": {
      "description": "Read reads up to len(p) bytes into p. It returns the number of bytes\nread (0 \u003c= n \u003c= len(p)) and any error encountered. Even if Read\nreturns n \u003c len(p), it may use all of p as scratch space during the call.\nIf some data is available but not len(p) bytes, Read conventionally\nreturns what is available instead of waiting for more.\n\nWhen Read encounters an error or end-of-file condition after\nsuccessfully reading n \u003e 0 bytes, it returns the number of\nbytes read. It may return the (non-nil) error from the same call\nor return the error (and n == 0) from a subsequent call.\nAn instance of this general case is that a Reader returning\na non-zero number of bytes at the end of the input stream may\nreturn either err == EOF or err == nil. The next Read should\nreturn 0, EOF.\n\nCallers should always process the n \u003e 0 bytes returned before\nconsidering the error err. Doing so correctly handles I/O errors\nthat happen after reading some bytes and also both of the\nallowed EOF behaviors.\n\nImplementations of Read are discouraged from returning a\nzero byte count with a nil error, except when len(p) == 0.\nCallers should treat a return of 0 and nil as indicating that\nnothing happened; in particular it does not indicate EOF.\n\nImplementations must not retain p.",
      "type": "object",
      "title": "Reader is the interface that wraps the basic Read method.",
      "x-go-package": "io"
    },
    "ReaderAt": {
      "description": "ReadAt reads len(p) bytes into p starting at offset off in the\nunderlying input source. It returns the number of bytes\nread (0 \u003c= n \u003c= len(p)) and any error encountered.\n\nWhen ReadAt returns n \u003c len(p), it returns a non-nil error\nexplaining why more bytes were not returned. In this respect,\nReadAt is stricter than Read.\n\nEven if ReadAt returns n \u003c len(p), it may use all of p as scratch\nspace during the call. If some data is available but not len(p) bytes,\nReadAt blocks until either all the data is available or an error occurs.\nIn this respect ReadAt is different from Read.\n\nIf the n = len(p) bytes returned by ReadAt are at the end of the\ninput source, ReadAt may return either err == EOF or err == nil.\n\nIf ReadAt is reading from an input source with a seek offset,\nReadAt should not affect nor be affected by the underlying\nseek offset.\n\nClients of ReadAt can execute parallel ReadAt calls on the\nsame input source.\n\nImplementations must not retain p.",
      "type": "object",
      "title": "ReaderAt is the interface that wraps the basic ReadAt method.",
      "x-go-package": "io"
    },
    "RemoveFromWishlistOpts": {
      "type": "object",
      "properties": {
        "catalog_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogID"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "RemoveInfluencerProductsOpts": {
      "type": "object",
      "properties": {
        "catalog_ids": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogIDs"
        },
        "influencer_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "InfluencerID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "ResendVerificationEmailOpts": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "ResetPasswordOpts": {
      "type": "object",
      "required": [
        "email",
        "password",
        "confirm_password",
        "otp"
      ],
      "properties": {
        "confirm_password": {
          "type": "string",
          "x-go-name": "ConfirmPassword"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "otp": {
          "type": "string",
          "x-go-name": "OTP"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "ReviewUserInfo": {
      "type": "object",
      "properties": {
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "profile_image": {
          "$ref": "#/definitions/Img"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "SearchOpts": {
      "type": "object",
      "properties": {
        "BrandID": {
          "type": "string"
        },
        "Page": {
          "type": "integer",
          "format": "int64"
        },
        "Query": {
          "type": "string"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "SearchResp": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandSearchResp"
          },
          "x-go-name": "Brand"
        },
        "catalog": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogSearchResp"
          },
          "x-go-name": "Catalog"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentSearchResp"
          },
          "x-go-name": "Content"
        },
        "influencer": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InfluencerSearchResp"
          },
          "x-go-name": "Influencer"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Seeker": {
      "description": "Seek sets the offset for the next Read or Write to offset,\ninterpreted according to whence:\nSeekStart means relative to the start of the file,\nSeekCurrent means relative to the current offset, and\nSeekEnd means relative to the end.\nSeek returns the new offset relative to the start of the\nfile and an error, if any.\n\nSeeking to an offset before the start of the file is an error.\nSeeking to any positive offset is legal, but the behavior of subsequent\nI/O operations on the underlying object is implementation-dependent.",
      "type": "object",
      "title": "Seeker is the interface that wraps the basic Seek method.",
      "x-go-package": "io"
    },
    "SeriesSearchResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "thumbnail": {
          "$ref": "#/definitions/Img"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "SeriesSubCollection": {
      "type": "object",
      "properties": {
        "_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "series_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SeriesIDs"
        },
        "thumbnail": {
          "$ref": "#/definitions/IMG"
        }
      },
      "x-go-package": "go-app/model"
    },
    "ShopSearchResp": {
      "type": "object",
      "properties": {
        "catalog": {
          "description": "Brand   []BrandSearchResp   `json:\"brand\"`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogSearchResp"
          },
          "x-go-name": "Catalog"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "SigningMethod": {
      "type": "object",
      "title": "Implement SigningMethod to add new methods for signing or verifying tokens.",
      "properties": {
        "Alg": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/dgrijalva/jwt-go"
    },
    "SocialAccount": {
      "description": "SocialAccount contains info about social media pages such as facebook, instagram, etc",
      "type": "object",
      "properties": {
        "facebook": {
          "$ref": "#/definitions/SocialMedia"
        },
        "instagram": {
          "$ref": "#/definitions/SocialMedia"
        },
        "twitter": {
          "$ref": "#/definitions/SocialMedia"
        },
        "youtube": {
          "$ref": "#/definitions/SocialMedia"
        }
      },
      "x-go-package": "go-app/model"
    },
    "SocialAccountOpts": {
      "type": "object",
      "properties": {
        "facebook": {
          "$ref": "#/definitions/SocialMediaOpts"
        },
        "instagram": {
          "$ref": "#/definitions/SocialMediaOpts"
        },
        "twitter": {
          "$ref": "#/definitions/SocialMediaOpts"
        },
        "youtube": {
          "$ref": "#/definitions/SocialMediaOpts"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "SocialMedia": {
      "description": "Type -\u003e facebook\n\u003e twitter\n\u003e youtube\n\u003e instagram",
      "type": "object",
      "title": "SocialMedia contains followers_count for a specific account",
      "properties": {
        "followers_count": {
          "description": "followers count",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FollowersCount"
        },
        "url": {
          "description": "URL",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "go-app/model"
    },
    "SocialMediaOpts": {
      "type": "object",
      "properties": {
        "followers_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FollowersCount"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "Source": {
      "type": "object",
      "properties": {
        "id": {
          "description": "ID",
          "type": "string",
          "x-go-name": "ID"
        },
        "type": {
          "description": "type",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/model"
    },
    "Specification": {
      "description": "Specification contains catalog specification in key:value format",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/model"
    },
    "StandardClaims": {
      "description": "Structured version of Claims Section, as referenced at\nhttps://tools.ietf.org/html/rfc7519#section-4.1\nSee examples for how to use this with your own claim types",
      "type": "object",
      "properties": {
        "aud": {
          "type": "string",
          "x-go-name": "Audience"
        },
        "exp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresAt"
        },
        "iat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssuedAt"
        },
        "iss": {
          "type": "string",
          "x-go-name": "Issuer"
        },
        "jti": {
          "type": "string",
          "x-go-name": "Id"
        },
        "nbf": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotBefore"
        },
        "sub": {
          "type": "string",
          "x-go-name": "Subject"
        }
      },
      "x-go-package": "github.com/dgrijalva/jwt-go"
    },
    "StartLiveStreamResp": {
      "type": "object",
      "properties": {
        "ingest_url": {
          "type": "string",
          "x-go-name": "IngestURL"
        },
        "stream_key": {
          "type": "string",
          "x-go-name": "StreamKey"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "State": {
      "type": "object",
      "properties": {
        "iso_code": {
          "description": "i s o code",
          "type": "string",
          "x-go-name": "ISOCode"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/model"
    },
    "Status": {
      "description": "Unlist: status is set by default when a new catalog instance is created.\ncatalog with this status are now shown to the customer as this represents WIP catalog.\nunlist is one time status only once unlist status is changed it cannot be reverted.\n\nallowed status transitions \t-\u003e publish\n\u003e discard\n\nPublish: \tstatus is set thorugh admin/keeper dashboard to allow visibility of a catalog to customer.\npublish status can only be changed to discard\n\nallowed status transitions \t-\u003e discard\n\nDiscard:\tdiscard is an alias to delete a catalog without actually deleting it from the database to avoid NOT FOUND for\nother services while searching for catalog",
      "type": "object",
      "title": "Status stores catalog status such as unlisted (default), published, archive",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "go-app/model"
    },
    "StreamStatus": {
      "description": "StreamStatus represents status of the stream",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/model"
    },
    "SuccessfulLogin": {
      "type": "object",
      "properties": {
        "token": {
          "description": "Token after successful login",
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-name": "EmailLoginCustomerResp",
      "x-go-package": "go-app/schema"
    },
    "Tax": {
      "type": "object",
      "properties": {
        "rate": {
          "type": "number",
          "format": "float",
          "x-go-name": "Rate"
        },
        "tax_ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxRange"
          },
          "x-go-name": "TaxRanges"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "go-app/model"
    },
    "TaxRange": {
      "type": "object",
      "properties": {
        "max_value": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxValue"
        },
        "min_value": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinValue"
        },
        "rate": {
          "type": "number",
          "format": "float",
          "x-go-name": "Rate"
        }
      },
      "x-go-package": "go-app/model"
    },
    "Token": {
      "description": "A JWT Token.  Different fields will be used depending on whether you're\ncreating or parsing/verifying a token.",
      "type": "object",
      "properties": {
        "Claims": {
          "$ref": "#/definitions/Claims"
        },
        "Header": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Method": {
          "$ref": "#/definitions/SigningMethod"
        },
        "Raw": {
          "type": "string"
        },
        "Signature": {
          "type": "string"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/dgrijalva/jwt-go"
    },
    "TokenAuth": {
      "type": "object",
      "x-go-package": "go-app/server/auth"
    },
    "UpdateCustomerOpts": {
      "type": "object",
      "properties": {
        "dob": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DOB"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "gender": {
          "type": "string",
          "x-go-name": "Gender"
        },
        "id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "ID"
        },
        "phone_no": {
          "$ref": "#/definitions/PhoneNoOpts"
        },
        "profile_image": {
          "$ref": "#/definitions/Img"
        },
        "user_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "UpdateInventoryCVOpts": {
      "type": "object",
      "properties": {
        "catalog_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "CatalogID"
        },
        "operation": {
          "$ref": "#/definitions/UpdateInventoryOperation"
        },
        "variant_id": {
          "type": "string",
          "format": "ObjectID",
          "x-go-name": "VariantID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "UpdateInventoryOperation": {
      "description": "UpdateInventoryOperation defines struct for operation on Inventory",
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "x-go-name": "Operator"
        },
        "unit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Unit"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "UpdateItemQtyOpts": {
      "type": "object",
      "properties": {
        "catalog_id": {
          "type": "string",
          "format": "Objectid",
          "x-go-name": "CatalogID"
        },
        "id": {
          "type": "string",
          "format": "Objectid",
          "x-go-name": "ID"
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Quantity"
        },
        "variant_id": {
          "type": "string",
          "format": "Objectid",
          "x-go-name": "VariantID"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "UserClaim": {
      "type": "object",
      "properties": {
        "aud": {
          "type": "string",
          "x-go-name": "Audience"
        },
        "brand_info": {
          "$ref": "#/definitions/BrandClaim"
        },
        "cart_id": {
          "type": "string",
          "x-go-name": "CartID"
        },
        "created_via": {
          "type": "string",
          "x-go-name": "CreatedVia"
        },
        "customer_id": {
          "type": "string",
          "x-go-name": "CustomerID"
        },
        "dob": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DOB"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "email_verified": {
          "type": "boolean",
          "x-go-name": "EmailVerified"
        },
        "exp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresAt"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "gender": {
          "type": "string",
          "x-go-name": "Gender"
        },
        "iat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssuedAt"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "influencer_info": {
          "$ref": "#/definitions/InfluencerInfo"
        },
        "iss": {
          "type": "string",
          "x-go-name": "Issuer"
        },
        "jti": {
          "type": "string",
          "x-go-name": "Id"
        },
        "keeper_user_id": {
          "type": "string",
          "x-go-name": "KeeperUserID"
        },
        "nbf": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotBefore"
        },
        "phone_no": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "phone_verified": {
          "type": "boolean",
          "x-go-name": "PhoneVerified"
        },
        "profile_image": {
          "$ref": "#/definitions/IMG"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        },
        "sub": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "user_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          },
          "x-go-name": "UserGroups"
        }
      },
      "x-go-package": "go-app/server/auth"
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "go-app/model"
    },
    "Variant": {
      "description": "Variant contains variants based on one property (size, color)",
      "type": "object",
      "properties": {
        "attribute": {
          "type": "string",
          "x-go-name": "Attribute"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "inventory_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "is_deleted": {
          "type": "boolean",
          "x-go-name": "IsDeleted"
        },
        "sku": {
          "type": "string",
          "x-go-name": "SKU"
        }
      },
      "x-go-package": "go-app/model"
    },
    "VariantInfo": {
      "description": "VariantInfo contains all variant data (size, color)",
      "type": "object",
      "properties": {
        "attribute": {
          "type": "string",
          "x-go-name": "Attribute"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "inventory_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "inventory_info": {
          "$ref": "#/definitions/Inventory"
        },
        "is_deleted": {
          "type": "boolean",
          "x-go-name": "IsDeleted"
        },
        "sku": {
          "type": "string",
          "x-go-name": "SKU"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "VerifyEmailOpts": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "verification_code": {
          "type": "string",
          "x-go-name": "VerificationCode"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "VerifyPhoneNoOpts": {
      "type": "object",
      "required": [
        "phone_no",
        "verification_code"
      ],
      "properties": {
        "phone_no": {
          "$ref": "#/definitions/PhoneNoOpts"
        },
        "verification_code": {
          "type": "string",
          "x-go-name": "VerificationCode"
        }
      },
      "x-go-package": "go-app/schema"
    },
    "addToCart": {
      "type": "object",
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/getAddress"
        },
        "coupon": {
          "$ref": "#/definitions/Coupon"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "x-go-name": "Items"
        },
        "shipping_address": {
          "$ref": "#/definitions/getAddress"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "user_id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "x-go-name": "Cart",
      "x-go-package": "go-app/model"
    },
    "getAddress": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "x-go-name": "City"
        },
        "contact_number": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "district": {
          "type": "string",
          "x-go-name": "District"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "is_billing_address": {
          "type": "boolean",
          "x-go-name": "IsBillingAddress"
        },
        "is_default_address": {
          "type": "boolean",
          "x-go-name": "IsDefaultAddress"
        },
        "is_shipping_address": {
          "type": "boolean",
          "x-go-name": "IsShippingAddress"
        },
        "line1": {
          "type": "string",
          "x-go-name": "Line1"
        },
        "line2": {
          "type": "string",
          "x-go-name": "Line2"
        },
        "plain_address": {
          "type": "string",
          "x-go-name": "PlainAddress"
        },
        "postal_code": {
          "type": "string",
          "x-go-name": "PostalCode"
        },
        "state": {
          "$ref": "#/definitions/State"
        }
      },
      "x-go-name": "Address",
      "x-go-package": "go-app/model"
    },
    "getBrandByID": {
      "type": "object",
      "properties": {
        "bio": {
          "type": "string",
          "x-go-name": "Bio"
        },
        "cover_img": {
          "$ref": "#/definitions/IMG"
        },
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "followers_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FollowersCount"
        },
        "followers_id": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "FollowersID"
        },
        "following_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FollowingCount"
        },
        "following_id": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "FollowingID"
        },
        "fulfillment_cc_email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "FulfillmentCCEmail"
        },
        "fulfillment_email": {
          "type": "string",
          "x-go-name": "FulfillmentEmail"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "lname": {
          "type": "string",
          "x-go-name": "LName"
        },
        "logo": {
          "$ref": "#/definitions/IMG"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "registered_name": {
          "type": "string",
          "x-go-name": "RegisteredName"
        },
        "size_profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetSizeProfileForBrandResp"
          },
          "x-go-name": "SizeProfiles"
        },
        "social_account": {
          "$ref": "#/definitions/SocialAccount"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        },
        "website": {
          "type": "string",
          "x-go-name": "Website"
        }
      },
      "x-go-name": "GetBrandResp",
      "x-go-package": "go-app/schema"
    },
    "getCustomerInfo": {
      "type": "object",
      "properties": {
        "brand_follow_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "BrandFollowCount"
        },
        "brand_following": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "BrandFollowing"
        },
        "cart_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "dob": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DOB"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName"
        },
        "gender": {
          "type": "string",
          "x-go-name": "Gender"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "influencer_follow_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "InfluencerFollowCount"
        },
        "influencer_following": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectID"
          },
          "x-go-name": "InfluencerFollowing"
        },
        "profile_image": {
          "$ref": "#/definitions/IMG"
        },
        "user_id": {
          "$ref": "#/definitions/ObjectID"
        },
        "user_info": {
          "$ref": "#/definitions/GetUserInfoResp"
        }
      },
      "x-go-name": "GetCustomerProfileInfoResp",
      "x-go-package": "go-app/schema"
    }
  },
  "x-tagGroups": [
    {
      "description": "This is the catalogv2 api.",
      "name": "CatalogV2",
      "tags": [
        "AppCatalog",
        "AppCollectionCatalogV2",
        "AppCategoryCatalog",
        "InfluencerCollectionKEEPER",
        "InfluencerCollectionApp",
        "AppReview",
        "AppSale",
        "Inventory",
        "LegacySearch",
        "UnicommerceAPIs"
      ],
      "x-traitTag": true
    },
      {
        "description": "This is the stardust api.",
        "name": "Stardust",
        "tags": [
          "AppCategory",
          "LiveStream",
          "Pebble",
          "content",
          "UploadImage",
          "live"
        ]
      },
      {
        "description": "This is the entity api.",
        "name": "Entity",
        "tags": [
          "Brand",
          "cart",
          "coupon",
          "Check",
          "CODviaGoKwik",
          "Creator",
          "DebitRequest",
          "followUnfollow",
          "getCustomerInfo",
          "ExpressCheckout",
          "AppInfluencer",
          "GetSizeProfile",
          "InfluencerRequest",
          "Wishlist",
          "CheckUsername",
          "BrandDashAPIs",
          "customer",
          "login",
          "signup",
          "ME",
          "checkEmail",
          "Verification",
          "logout",
          "checkPhoneNo",
          "Password",
          "getUserIDByInfluencerID",
          "v2Influnencer"
        ],
        "x-traitTag": true
      }
    ]
}